<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://castorfou.github.io/guillaume_blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://castorfou.github.io/guillaume_blog/" rel="alternate" type="text/html" /><updated>2022-07-27T02:05:21-05:00</updated><id>https://castorfou.github.io/guillaume_blog/feed.xml</id><title type="html">Guillaume’s blog</title><subtitle>Journey for a datascientist</subtitle><entry><title type="html">install ubuntu 18.04 on WSL and then evalai</title><link href="https://castorfou.github.io/guillaume_blog/blog/install-ubuntu-18.04-on-WSL.html" rel="alternate" type="text/html" title="install ubuntu 18.04 on WSL and then evalai" /><published>2022-07-26T00:00:00-05:00</published><updated>2022-07-26T00:00:00-05:00</updated><id>https://castorfou.github.io/guillaume_blog/blog/install%20ubuntu%2018.04%20on%20WSL</id><content type="html" xml:base="https://castorfou.github.io/guillaume_blog/blog/install-ubuntu-18.04-on-WSL.html"><![CDATA[<h2 id="source-of-inspiration">source of inspiration</h2>

<p><a href="/guillaume_blog/blog/install-ubuntu-22.04-on-WSL.html">install ubuntu 22.04 on WSL</a></p>

<p><a href="https://evalai.readthedocs.io/en/stable/setup.html#ubuntu-installation-instructions">install evalai in ubuntu</a></p>

<h2 id="installation-ubuntu-1804">Installation ubuntu-18.04</h2>

<h3 id="uninstall-image-if-needed">uninstall image (if needed)</h3>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># wsl --unregister &lt;distroName&gt;</span><span class="w">
</span><span class="n">wsl</span><span class="w"> </span><span class="nt">--unregister</span><span class="w"> </span><span class="nx">ubuntu-18.04</span><span class="w">
</span></code></pre></div></div>

<h3 id="download-images">download images</h3>

<p>From <a href="https://cloud-images.ubuntu.com/bionic/current/">cloud images ubuntu</a> (cloud-images &gt; bionic&gt; current), now there are wsl images:</p>

<p><img src="https://www.windowscentral.com/sites/wpcentral.com/files/styles/larger/public/field/image/2022/01/ubuntu-cloud-images-website.png" alt="ubuntu cloud images" /></p>

<p>I just have to download the last bionic (18.04) image <code class="language-plaintext highlighter-rouge">bionic-server-cloudimg-amd64-wsl.rootfs.tar.gz</code></p>

<h3 id="install-and-setup-from-powershell">install and setup from powershell</h3>

<p>I have downloaded this ubuntu image to <code class="language-plaintext highlighter-rouge">D:\wsl\ubuntu-18.04\download</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>base<span class="o">)</span> guillaume@LL11LPC0PQARQ:/mnt/d/wsl<span class="nv">$ </span>tree
<span class="nb">.</span>
├── Ubuntu-20.04
│   └── ext4.vhdx
├── Ubuntu-22.04
│   ├── download
│   │   └── jammy-server-cloudimg-amd64-wsl.rootfs.tar.gz
│   └── instance
</code></pre></div></div>

<p>and my <code class="language-plaintext highlighter-rouge">ubuntu-18.04</code> instance will stand in <code class="language-plaintext highlighter-rouge">D:\wsl\ubuntu-18.04\instance</code></p>

<p>Install with this command from powershell</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># wsl --import &lt;distroname&gt; &lt;location of instance&gt; &lt;location of download&gt;</span><span class="w">
</span><span class="n">wsl</span><span class="w"> </span><span class="nt">--import</span><span class="w"> </span><span class="nx">ubuntu-18.04</span><span class="w"> </span><span class="nx">D:\wsl\ubuntu-18.04\instance</span><span class="w"> </span><span class="nx">D:\wsl\ubuntu-18.04\download\bionic-server-cloudimg-amd64-wsl.rootfs.tar.gz</span><span class="w">
</span></code></pre></div></div>

<p>It takes 3-4 minutes to install. and should be visible in your wsl instances.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w"> </span><span class="n">wsl</span><span class="w"> </span><span class="nt">--list</span><span class="w"> </span><span class="nt">--all</span><span class="w"> </span><span class="nt">-v</span><span class="w">
  </span><span class="n">NAME</span><span class="w">            </span><span class="nx">STATE</span><span class="w">           </span><span class="nx">VERSION</span><span class="w">
  </span><span class="n">ubuntu-22.04</span><span class="w">    </span><span class="nx">Stopped</span><span class="w">         </span><span class="nx">2</span><span class="w">
</span></code></pre></div></div>

<p>then to run it</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># wsl -d &lt;distroname&gt;</span><span class="w">
</span><span class="n">wsl</span><span class="w"> </span><span class="nt">-d</span><span class="w"> </span><span class="nx">ubuntu-18.04</span><span class="w">
</span></code></pre></div></div>

<p>or</p>

<h4 id="use-windows-terminal-as-a-launcher">use Windows Terminal as a launcher</h4>

<p>Windows Terminal is a smart way to group all terminals (powershell, and all your wsl instances)</p>

<p><img src="../images/windows_terminal.jpg" alt="windows terminal" /></p>

<p>It can be installed even with limited windows store access by clicking install in <a href="https://docs.microsoft.com/fr-fr/windows/terminal/install">Installer le Terminal Windows et commencer à le configurer</a></p>

<p>Automatically all wsl instances appear in Settings.</p>

<h2 id="automatic-setup">Automatic setup</h2>

<p>copy these 2 <a href="https://github.com/castorfou/guillaume_blog/tree/master/files">scripts</a> in /root/ (given they are in <code class="language-plaintext highlighter-rouge">D:\wsl\ubuntu-18.04\download</code>)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cp</span> /mnt/d/wsl/Ubuntu-18.04/download/setup_wsl_<span class="k">*</span> <span class="nb">.</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">setup_wsl_root.sh</code> <a href="../files/setup_wsl_root.sh">download</a></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="nb">echo</span> <span class="s2">"0. get username: "</span>
<span class="nb">read </span>user_name

<span class="nb">.</span> /etc/lsb-release

<span class="nb">echo </span>Configuration <span class="k">for </span>user <span class="o">[</span><span class="nv">$user_name</span><span class="o">]</span>
<span class="nb">echo </span>of distribution <span class="nv">$DISTRIB_CODENAME</span>
<span class="nb">echo

echo</span> <span class="s2">"1. create user and add in sudo"</span>
<span class="c">#adduser --disabled-password --gecos "" $user_name</span>
adduser <span class="nt">--gecos</span> <span class="s2">""</span> <span class="nv">$user_name</span>
usermod <span class="nt">-aG</span> <span class="nb">sudo</span> <span class="nv">$user_name</span>
<span class="nb">echo

echo</span> <span class="s2">"2. create wsl.conf file"</span>
<span class="nb">rm</span> <span class="nt">-rf</span> /etc/wsl.conf
<span class="nb">tee</span> /etc/wsl.conf <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
# Set the user when launching a distribution with WSL.
[user]
default=</span><span class="nv">$user_name</span><span class="sh">
</span><span class="no">EOF
</span><span class="nb">echo

echo</span> <span class="s2">"3. prepare setup by user"</span>
<span class="nb">cp </span>setup_wsl_user.sh /home/<span class="nv">$user_name</span>
<span class="nb">chown</span> <span class="nv">$user_name</span>:users /home/<span class="nv">$user_name</span>/setup_wsl_user.sh
<span class="nb">chmod </span>750  /home/<span class="nv">$user_name</span>/setup_wsl_user.sh
<span class="nb">tee</span> <span class="nt">-a</span> /home/<span class="nv">$user_name</span>/.bashrc <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
if [ ! -e ".wsl_configured" ]; then
		./setup_wsl_user.sh
        touch .wsl_configured
fi
</span><span class="no">EOF
</span><span class="nb">echo

echo</span> <span class="s2">"end of configuration for root"</span>
<span class="nb">echo</span> <span class="s2">"stop wsl instance by running 'wsl -t &lt;distro-name&gt;' from powershell"</span>
<span class="nb">echo</span> <span class="s2">"and start from Windows Terminal"</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">setup_wsl_user.sh</code> <a href="../files/setup_wsl_user.sh">download</a></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="nb">echo</span> <span class="s2">"1. setup wsl-vpnkit"</span>
<span class="k">if </span><span class="nb">grep</span> <span class="nt">-Fxq</span> <span class="s2">"wsl-vpnkit"</span> ~/.profile
<span class="k">then</span>
    <span class="c"># code if found</span>
	<span class="nb">echo</span> <span class="s2">"   wsl-vpnkit already setup"</span>
<span class="k">else</span>
    <span class="c"># code if not found</span>
	<span class="nb">echo</span> <span class="s1">'wsl.exe -d wsl-vpnkit service wsl-vpnkit start'</span> <span class="o">&gt;&gt;</span> ~/.profile
<span class="k">fi
</span>wsl.exe <span class="nt">-d</span> wsl-vpnkit service wsl-vpnkit start
<span class="nb">source</span> ./.bashrc
<span class="nb">echo

echo</span> <span class="s2">"2. create ssh key to copy to gitlab"</span>
<span class="nb">.</span> /etc/lsb-release
<span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-e</span> <span class="s2">".ssh/id_rsa.pub"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
		</span>ssh-keygen <span class="nt">-t</span> rsa <span class="nt">-b</span> 4096 <span class="nt">-C</span> <span class="s2">"WSL2 ubuntu </span><span class="nv">$DISTRIB_RELEASE</span><span class="s2">"</span>
		<span class="nb">cat</span> .ssh/id_rsa.pub
		<span class="nb">echo</span> <span class="s2">"copy this content to gitlab &gt; preferences &gt; SSH Keys"</span>
		<span class="nb">read</span> <span class="nt">-p</span> <span class="s2">"Press any key to resume ..."</span>
<span class="k">fi
</span><span class="nb">echo

echo</span> <span class="s2">"3. update certificates"</span>
git clone git@gitlab.michelin.com:devops-foundation/devops_environment.git /tmp/devops_environment
<span class="nb">sudo cp</span> /tmp/devops_environment/certs/<span class="k">*</span> /usr/local/share/ca-certificates/
<span class="nb">sudo </span>update-ca-certificates
<span class="nb">rm</span> <span class="nt">-rf</span> /tmp/devops_environment
<span class="k">if</span> <span class="o">[</span> <span class="nv">$DISTRIB_RELEASE</span> <span class="o">==</span> <span class="s2">"22.04"</span> <span class="o">]</span>
<span class="k">then
</span><span class="nb">echo</span> <span class="s1">'bug SSL with ubuntu 22.04 - https://bugs.launchpad.net/ubuntu/+source/openssl/+bug/1963834/comments/7'</span>
<span class="nb">sudo tee</span> <span class="nt">-a</span> /etc/ssl/openssl.cnf <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
[openssl_init]
ssl_conf = ssl_sect

[ssl_sect]
system_default = system_default_sect

[system_default_sect]
Options = UnsafeLegacyRenegotiation
</span><span class="no">EOF
</span><span class="k">fi
</span><span class="nb">echo

echo</span> <span class="s2">"4. update apt sources with artifactory"</span>
<span class="nb">echo</span> <span class="s1">'Acquire { http::User-Agent "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:13.37) Gecko/20100101 Firefox/31.33.7"; };'</span> | <span class="nb">sudo tee</span> /etc/apt/apt.conf.d/90globalprotectconf
<span class="nb">sudo sed</span> <span class="nt">-i</span> <span class="s1">'s,http://archive.ubuntu.com/ubuntu,https://artifactory.michelin.com/artifactory/ubuntu-archive-remote,g'</span> /etc/apt/sources.list
<span class="nb">sudo sed</span> <span class="nt">-i</span> <span class="s1">'s,http://security.ubuntu.com/ubuntu,https://artifactory.michelin.com/artifactory/ubuntu-archive-remote,g'</span> /etc/apt/sources.list
<span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt upgrade <span class="nt">-y</span>
<span class="nb">echo</span>
</code></pre></div></div>

<p>Then</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x setup_wsl_root.sh
./setup_wsl_root.sh
</code></pre></div></div>

<p>As explained stop wsl instance by running <code class="language-plaintext highlighter-rouge">wsl --shutdown ubuntu-22.04</code> from powershell
and start from Windows Terminal</p>

<p>It restarts from your user and it will install:</p>

<ul>
  <li>setup wsl-vpnkit</li>
  <li>create ssh key to copy to gitlab</li>
  <li>update certificates</li>
  <li>update apt sources with artifactory</li>
</ul>

<h2 id="installation-evalai">Installation EvalAI</h2>

<h6 id="step-1-install-prerequisites">Step 1: Install prerequisites</h6>

<ul>
  <li>Install git - postgres</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt-get install git postgresql libpq-dev
</code></pre></div></div>

<ul>
  <li>install rabbit-mq</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nt">-y</span> <span class="nb">install </span>socat logrotate init-system-helpers adduser erlang-base 
<span class="c"># download the package</span>
wget https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.10.6/rabbitmq-server_3.10.6-1_all.deb

<span class="c"># install the package with dpkg</span>
<span class="nb">sudo </span>dpkg <span class="nt">-i</span> rabbitmq-server_3.10.6-1_all.deb
<span class="nb">rm </span>rabbitmq-server_3.10.6-1_all.deb
</code></pre></div></div>
<ul>
  <li>install python 3.7
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>python3.7
<span class="nb">sudo </span>update-alternatives <span class="nt">--install</span> /usr/bin/python python /usr/bin/python3.7 1
<span class="nb">sudo </span>update-alternatives <span class="nt">--install</span> /usr/bin/python python /usr/bin/python3.6 2
update-alternatives <span class="nt">--list</span> python
<span class="nb">sudo </span>update-alternatives <span class="nt">--config</span> python
</code></pre></div>    </div>
  </li>
  <li>install virtualenv
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># only if pip is not installed</span>
<span class="nb">sudo </span>apt-get <span class="nb">install </span>python3-pip build-essential
<span class="c"># upgrade pip</span>
pip3 <span class="nb">install</span> <span class="nt">--upgrade</span> pip
<span class="c"># upgrade virtualenv</span>
pip <span class="nt">--trusted-host</span> pypi.org <span class="nt">--trusted-host</span> pypi.python.org <span class="nt">--trusted-host</span> files.pythonhosted.org <span class="nb">install</span> <span class="nt">--upgrade</span> virtualenv
<span class="nb">source</span> .profile
</code></pre></div>    </div>
  </li>
</ul>

<h6 id="step-2-get-evalai-code">Step 2: Get EvalAI code</h6>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/Cloud-CV/EvalAI.git evalai
</code></pre></div></div>

<h6 id="step-3-setup-codebase">Step 3: Setup codebase</h6>

<ul>
  <li>Create a python virtual environment and install python dependencies.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#pour curl-config
sudo apt install libcurl4-openssl-dev libssl-dev

cd evalai
virtualenv -p python3.7 venv
source venv/bin/activate

pip --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org install -r requirements/dev.txt
# issue on django-autofixture 
# https://github.com/gregmuellegger/django-autofixture/issues/117
</code></pre></div></div>

<div class="alert alert-block alert-danger">
cannot go further due to this error.
at some time in setuptools, dist.py has been introduced long_description ends-with, and it is not managed by 'UltraMagicString' in django-autofixture
</div>

<ul>
  <li>Rename <code class="language-plaintext highlighter-rouge">settings/dev.sample.py</code> as <code class="language-plaintext highlighter-rouge">dev.py</code></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cp settings/dev.sample.py settings/dev.py
</code></pre></div></div>

<ul>
  <li>Create an empty postgres database and run database migration.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>createdb evalai -U postgres
# update postgres user password
psql -U postgres -c "ALTER USER postgres PASSWORD 'postgres';"
# run migrations
python manage.py migrate
</code></pre></div></div>

<ul>
  <li>For setting up frontend, please make sure that node(<code class="language-plaintext highlighter-rouge">&gt;=7.x.x</code>), npm(<code class="language-plaintext highlighter-rouge">&gt;=5.x.x</code>) and bower(<code class="language-plaintext highlighter-rouge">&gt;=1.8.x</code>) are installed globally on your machine. Install npm and bower dependencies by running</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install
bower install
</code></pre></div></div>]]></content><author><name></name></author><category term="wsl" /><summary type="html"><![CDATA[could be useful to install evalai]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://castorfou.github.io/guillaume_blog/images/icons/wsl2.jpeg" /><media:content medium="image" url="https://castorfou.github.io/guillaume_blog/images/icons/wsl2.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Auto export python code from jupyter lab</title><link href="https://castorfou.github.io/guillaume_blog/blog/jupyter-export-lab-as-py.html" rel="alternate" type="text/html" title="Auto export python code from jupyter lab" /><published>2022-07-21T00:00:00-05:00</published><updated>2022-07-21T00:00:00-05:00</updated><id>https://castorfou.github.io/guillaume_blog/blog/jupyter-export-lab-as-py</id><content type="html" xml:base="https://castorfou.github.io/guillaume_blog/blog/jupyter-export-lab-as-py.html"><![CDATA[<!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2022-07-21-jupyter-export-lab-as-py.ipynb
-->

<div class="container" id="notebook-container">
        
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>This hack comes from <a href="https://drivendata.co/blog/nbautoexport-jupyter-code-review/">EASIER CODE REVIEWS FOR JUPYTER NOTEBOOKS WITH NBAUTOEXPORT</a>.</p>
<p>And this is an updated version for Jupyter lab when <a href="/guillaume_blog/blog/jupyter-export-notebook-as-py.html">Auto export python code from jupyter notebooks</a> was specifically for Jupyter notebook.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h1 id="Install-NBAUTOEXPORT">Install NBAUTOEXPORT<a class="anchor-link" href="#Install-NBAUTOEXPORT"> </a></h1>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>You should install it in the same virtual environment that you are running Jupyter Notebook or JupyterLab from.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<div class="highlight"><pre><span></span><span class="c1"># in base (from in _conda_env/base.txt)</span>
pip install nbautoexport
</pre></div>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="o">!</span>cat ~/_conda_env/base.txt
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>conda install -y mamba -n base -c conda-forge
mamba init
mamba install -y nb_conda_kernels
mamba install -y -c conda-forge jupyterlab jupyterlab-git
mamba install -y ipywidgets

mamba install -y -c conda-forge jupyterlab_execute_time
#and change in jupyter lab : Settings- &gt; Advanced Settings Editor -&gt; Notebook: {&#34;recordTiming&#34;: true} 

pip install --upgrade nvitop

jupyter labextension install jupyterlab-spreadsheet
pip install jupyterlab-tabular-data-editor
pip install nbautoexport
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>There are two main steps to setting up nbautoexport:</p>
<ul>
<li>Install nbautoexport as a post-save hook with Jupyter (once per machine you use it on)</li>
<li>Configure a notebooks directory (once per project you are working on)</li>
</ul>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h1 id="Install-nbautoexport-as-a-post-save-hook">Install nbautoexport as a post-save hook<a class="anchor-link" href="#Install-nbautoexport-as-a-post-save-hook"> </a></h1>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<div class="highlight"><pre><span></span><span class="c1"># from base environment</span>
nbautoexport install

&gt; nbautoexport post-save hook successfully installed with Jupyter.
&gt; If a Jupyter server is already running, you will need to restart it <span class="k">for</span> nbautoexport to work.
</pre></div>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h1 id="Configure-a-notebooks-directory">Configure a notebooks directory<a class="anchor-link" href="#Configure-a-notebooks-directory"> </a></h1>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<div class="highlight"><pre><span></span><span class="c1"># from your notebooks directory</span>
nbautoexport configure .
</pre></div>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>It creates this file <code>.nbautoexport</code></p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<div class="highlight"><pre><span></span>───────┬───────────────────────────────────────────────────────────
       │ File: .nbautoexport
───────┼───────────────────────────────────────────────────────────
   <span class="m">1</span>   │ <span class="o">{</span>
   <span class="m">2</span>   │   <span class="s2">&quot;export_formats&quot;</span>: <span class="o">[</span>
   <span class="m">3</span>   │     <span class="s2">&quot;script&quot;</span>
   <span class="m">4</span>   │   <span class="o">]</span>,
   <span class="m">5</span>   │   <span class="s2">&quot;organize_by&quot;</span>: <span class="s2">&quot;extension&quot;</span>,
   <span class="m">6</span>   │   <span class="s2">&quot;clean&quot;</span>: <span class="o">{</span>
   <span class="m">7</span>   │     <span class="s2">&quot;exclude&quot;</span>: <span class="o">[]</span>
   <span class="m">8</span>   │   <span class="o">}</span>
   <span class="m">9</span>   │ <span class="o">}</span>
───────┴───────────────────────────────────────────────────────────
</pre></div>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h1 id="Test">Test<a class="anchor-link" href="#Test"> </a></h1>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>After running it in my blog <code>_notebooks</code> directory, and saving a notebook; a <code>script</code> directory and <code>.py</code> file with notebook content are created</p>
<div class="highlight"><pre><span></span><span class="o">(</span>base<span class="o">)</span> guillaume@LL11LPC0PQARQ:~/git/guillaume_blog/_notebooks$ tree
.
├── .nbautoexport
├── <span class="m">2022</span>-07-21-jupyter-export-lab-as-py.ipynb
├── README.md
└── script
    └── <span class="m">2022</span>-07-21-jupyter-export-lab-as-py.py
</pre></div>
<p><code>2022-07-21-jupyter-export-lab-as-py.py</code> has been created as expected</p>
<p>I can now delete <code>.nbautoexport</code> and it won't happen in that directory</p>

</div>
</div>
</div>
</div>]]></content><author><name></name></author><category term="jupyter" /><summary type="html"><![CDATA[because it is easier to search from .py files in text format. Using nbautoexports in jupyter lab]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://castorfou.github.io/guillaume_blog/images/icons/jupyter.png" /><media:content medium="image" url="https://castorfou.github.io/guillaume_blog/images/icons/jupyter.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">install docker within WSL</title><link href="https://castorfou.github.io/guillaume_blog/blog/install-docker-on-WSL.html" rel="alternate" type="text/html" title="install docker within WSL" /><published>2022-07-21T00:00:00-05:00</published><updated>2022-07-21T00:00:00-05:00</updated><id>https://castorfou.github.io/guillaume_blog/blog/install%20docker%20on%20WSL</id><content type="html" xml:base="https://castorfou.github.io/guillaume_blog/blog/install-docker-on-WSL.html"><![CDATA[<h2 id="source-of-inspiration">source of inspiration</h2>

<p><a href="https://dev.michelin.com/wsl2/docker">WSL 2 Docker inside WSL 2</a></p>

<p><a href="/guillaume_blog/blog/install-ubuntu-22.04-on-WSL.html">install ubuntu 22.04 on WSL</a></p>

<h2 id="pre-requisite-installation---ubuntu-docker">Pre-requisite Installation - ubuntu-docker</h2>

<h3 id="uninstall-image-if-needed">uninstall image (if needed)</h3>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># wsl --unregister &lt;distroName&gt;</span><span class="w">
</span><span class="n">wsl</span><span class="w"> </span><span class="nt">--unregister</span><span class="w"> </span><span class="nx">ubuntu-docker</span><span class="w">
</span></code></pre></div></div>

<h3 id="setup-installation-directory">setup installation directory</h3>

<p>create this structure by copying the existing one from <code class="language-plaintext highlighter-rouge">ubuntu-22.04</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>guillaume@LL11LPC0PQARQ:/mnt/d/wsl/Ubuntu-docker<span class="nv">$ </span>tree
<span class="nb">.</span>
└── download
    ├── GWSL.Traditional.140.release.x64.exe
    ├── ZscalerRootCA.crt
    ├── jammy-server-cloudimg-amd64-wsl.rootfs.tar.gz
    ├── setup_wsl_root.sh
    └── setup_wsl_user.sh
</code></pre></div></div>

<h3 id="create-ubuntu-docker-image">create ubuntu-docker image</h3>

<p>from Powershell</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">wsl</span><span class="w"> </span><span class="nt">--import</span><span class="w"> </span><span class="nx">ubuntu-docker</span><span class="w"> </span><span class="nx">D:\wsl\ubuntu-docker\instance</span><span class="w"> </span><span class="nx">D:\wsl\ubuntu-docker\download\jammy-server-cloudimg-amd64-wsl.rootfs.tar.gz</span><span class="w">

</span><span class="c">#should appear in </span><span class="w">
</span><span class="n">wsl</span><span class="w"> </span><span class="nt">--list</span><span class="w"> </span><span class="nt">--all</span><span class="w"> </span><span class="nt">-v</span><span class="w">
</span></code></pre></div></div>

<h3 id="declare-ubuntu-docker-in-windows-terminal">declare ubuntu-docker in Windows Terminal</h3>

<p>Windows Terminal &gt; Settings &gt; Add a profile &gt; Duplicate a profile (from Ubuntu-22.04)</p>

<p>Name: <code class="language-plaintext highlighter-rouge">ubuntu-docker</code></p>

<p>Command line: <code class="language-plaintext highlighter-rouge">C:\WINDOWS\system32\wsl.exe -d ubuntu-docker</code></p>

<p>Tab title: <code class="language-plaintext highlighter-rouge">ubuntu docker</code></p>

<h3 id="setup-root-configuration">setup root configuration</h3>

<p>Start ubuntu-docker from Windows Terminal</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cp</span> /mnt/d/wsl/Ubuntu-docker/download/setup_wsl_<span class="k">*</span> <span class="nb">.</span>
<span class="nb">chmod</span> +x setup_wsl_root.sh
./setup_wsl_root.sh
</code></pre></div></div>

<p>enter username and password</p>

<p>From powershell, stop ubuntu-docker</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">wsl</span><span class="w"> </span><span class="nt">-t</span><span class="w"> </span><span class="nx">ubuntu-docker</span><span class="w">
</span></code></pre></div></div>

<h3 id="setup-user-configuration">setup user configuration</h3>

<p>Start ubuntu-docker from Windows Terminal</p>

<p>Follow instructions, don’t skip the integration of ssh key in gitlab</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>guillaume@LL11LPC0PQARQ:~<span class="nv">$ </span>host google.fr
google.fr has address 142.250.75.227
google.fr has IPv6 address 2a00:1450:4007:811::2003
Host google.fr not found: 3<span class="o">(</span>NXDOMAIN<span class="o">)</span>
</code></pre></div></div>

<p>That’s it for WSL setup, docker can now be installed</p>

<h1 id="docker-installation">Docker installation</h1>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl  https://artifactory.michelin.com/artifactory/mt-generic-prod/devops-environment/install.sh <span class="nt">-o</span> install.sh
</code></pre></div></div>

<p>Edit install.sh</p>

<ul>
  <li>line 246: add 22 as a support for ubuntu 22.04</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">declare -A support_matrix=(["debian"]="10 11" ["ubuntu"]="18 20")</code></p>

<ul>
  <li>comment lines 297 to 301</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">#configure_vpn_kit
#configure_wsl_dns
#install_cacert
#configure_apt_global "$os"
#configure_apt_artifactory "$os"</code></p>

<ul>
  <li>insert docker list (line 40)</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source</span> /etc/os-release
curl <span class="nt">-fsSL</span> https://download.docker.com/linux/<span class="k">${</span><span class="nv">ID</span><span class="k">}</span>/gpg | <span class="nb">sudo </span>apt-key add -
<span class="nb">echo</span> <span class="s2">"deb [arch=amd64] https://artifactory.michelin.com/artifactory/ubuntu-docker-remote jammy stable"</span> | <span class="nb">sudo tee</span> /etc/apt/sources.list.d/docker.list
<span class="nb">sudo </span>apt-get update
</code></pre></div></div>

<p>And run it</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x install.sh
./install.sh <span class="nt">--no-dev</span> <span class="nt">--no-dev-tools</span> <span class="nt">--no-swag</span> <span class="nt">--no-swagerino</span> <span class="nt">--no-kube</span> <span class="nt">--skip-update</span>
</code></pre></div></div>

<p>Activate legacy for iptables</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>update-alternatives <span class="nt">--set</span> iptables /usr/sbin/iptables-legacy
<span class="nb">sudo </span>update-alternatives <span class="nt">--set</span> ip6tables /usr/sbin/ip6tables-legacy
</code></pre></div></div>

<p>Then start docker service</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>service docker start
</code></pre></div></div>

<p>Before restarting, ensure your <code class="language-plaintext highlighter-rouge">wsl.conf</code> is correct (remove network-generateResolvConf entry and add user-default one):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>guillaume@LL11LPC0PQARQ:~<span class="nv">$ </span><span class="nb">cat</span> /etc/wsl.conf
<span class="o">[</span>user]
<span class="nv">default</span><span class="o">=</span>guillaume
</code></pre></div></div>

<p>Restart</p>

<h1 id="test-installation">Test installation</h1>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run docker.artifactory.michelin.com/hello-world
<span class="o">&gt;</span> Hello from Docker!
<span class="o">&gt;</span> This message shows that your installation appears to be working correctly.
</code></pre></div></div>]]></content><author><name></name></author><category term="wsl" /><summary type="html"><![CDATA[based on my automatic wsl installation]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://castorfou.github.io/guillaume_blog/images/icons/wsl2.jpeg" /><media:content medium="image" url="https://castorfou.github.io/guillaume_blog/images/icons/wsl2.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">install docker within linux</title><link href="https://castorfou.github.io/guillaume_blog/blog/install-docker-on-WSL-(copy).html" rel="alternate" type="text/html" title="install docker within linux" /><published>2022-07-21T00:00:00-05:00</published><updated>2022-07-21T00:00:00-05:00</updated><id>https://castorfou.github.io/guillaume_blog/blog/install%20docker%20on%20WSL%20(copy)</id><content type="html" xml:base="https://castorfou.github.io/guillaume_blog/blog/install-docker-on-WSL-(copy).html"><![CDATA[<h2 id="source-of-inspiration">source of inspiration</h2>

<p><a href="https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository">Install Docker Engine on Ubuntu</a></p>

<h2 id="installation-and-test">Installation and test</h2>

<h4 id="set-up-the-repository">Set up the repository</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get <span class="nb">install</span> <span class="se">\</span>
    ca-certificates <span class="se">\</span>
    curl <span class="se">\</span>
    gnupg <span class="se">\</span>
    lsb-release

<span class="c"># Add Docker’s official GPG key</span>
<span class="nb">sudo mkdir</span> <span class="nt">-p</span> /etc/apt/keyrings
curl <span class="nt">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg | <span class="nb">sudo </span>gpg <span class="nt">--dearmor</span> <span class="nt">-o</span> /etc/apt/keyrings/docker.gpg

<span class="c"># set up the Docker repository</span>
<span class="nb">echo</span> <span class="se">\</span>
  <span class="s2">"deb [arch=</span><span class="si">$(</span>dpkg <span class="nt">--print-architecture</span><span class="si">)</span><span class="s2"> signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu </span><span class="se">\</span><span class="s2">
  </span><span class="si">$(</span>lsb_release <span class="nt">-cs</span><span class="si">)</span><span class="s2"> stable"</span> | <span class="nb">sudo tee</span> /etc/apt/sources.list.d/docker.list <span class="o">&gt;</span> /dev/null
</code></pre></div></div>

<h4 id="install-docker-engine">Install Docker Engine</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Install Docker Engine</span>
<span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get <span class="nb">install </span>docker-ce docker-ce-cli containerd.io docker-compose-plugin
</code></pre></div></div>

<h4 id="test">Test</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>docker run hello-world
<span class="o">&gt;</span> Hello from Docker!
<span class="o">&gt;</span> <span class="o">[</span>...]
</code></pre></div></div>]]></content><author><name></name></author><category term="wsl" /><summary type="html"><![CDATA[under ubuntu 20.04]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://castorfou.github.io/guillaume_blog/images/icons/image_linux.jpg" /><media:content medium="image" url="https://castorfou.github.io/guillaume_blog/images/icons/image_linux.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Logbook for July 22</title><link href="https://castorfou.github.io/guillaume_blog/blog/logbook-July-22.html" rel="alternate" type="text/html" title="Logbook for July 22" /><published>2022-07-01T00:00:00-05:00</published><updated>2022-07-01T00:00:00-05:00</updated><id>https://castorfou.github.io/guillaume_blog/blog/logbook-July-22</id><content type="html" xml:base="https://castorfou.github.io/guillaume_blog/blog/logbook-July-22.html"><![CDATA[<h2 id="week-26---july-22">Week 26 - July 22</h2>

<p><strong>Friday 7/1</strong></p>

<ul>
  <li>continue <a href="/guillaume_blog/blog/deep-rl-class-with-huggingface.html">deep rl class</a> with unit 4, <u>unity ml agents within huggingface</u>. And there is a link to a page explaining <a href="https://huggingface.co/blog/decision-transformers">decision transformers</a>. Seems quite powerful and could be useful for me.</li>
</ul>

<h2 id="week-27---july-22">Week 27 - July 22</h2>

<p><strong>Wednesday 7/6</strong></p>

<ul>
  <li>continue <a href="/guillaume_blog/blog/deep-rl-class-with-huggingface.html">deep rl class</a> with unit 5, <u>Policy Gradient with PyTorch</u></li>
</ul>

<h2 id="week-29---july-22">Week 29 - July 22</h2>

<p><strong>Thursday 7/21</strong></p>

<ul>
  <li>I would like to host kaggle-like competitions. I have found <a href="https://github.com/Cloud-CV/EvalAI">EvalAI</a> which could be an option. I could push a competition for my data manufacturing colleagues and for other areas in my company. There is a <a href="https://github.com/Cloud-CV/EvalAI/tree/202001b582fdc332a062b85c02be228c3dcf2cd2#platform-comparison">comparison</a> with other kind of platforms (both closed and open sourced)</li>
  <li><del>installing <a href="https://dev.michelin.com/wsl2/docker-rancher">rancher desktop</a> to test EvalAI</del> I don’t have administrator rights anymore, so I have moved to installing <a href="/guillaume_blog/blog/install-docker-on-WSL.html">docker in WSL</a>.</li>
</ul>

<p><strong>Friday 7/22</strong></p>

<ul>
  <li>based on my docker in WSL installation, I tried to follow <a href="https://github.com/Cloud-CV/EvalAI">EvalAI</a> instructions. It fails at docker-compose build phase. I have opened a <a href="https://github.com/Cloud-CV/EvalAI/issues/3775">ticket</a>.</li>
</ul>

<h2 id="week-30---july-22">Week 30 - July 22</h2>

<p><strong>Monday 7/25</strong></p>

<p>As a matter of test, installation of <a href="https://github.com/Cloud-CV/EvalAI">EvalAI</a> on my linux machine (no issue with corporate FW) using docker</p>

<p><strong>Tuesday 7/26</strong></p>

<p>As a matter of test, installation of <a href="https://evalai.readthedocs.io/en/stable/setup.html#ubuntu-installation-instructions">EvalAI</a> on my wsl machine using virtualenv (no docker) to try a gitlab connectivity instead of github</p>

<h6 id="step-1-install-prerequisites">Step 1: Install prerequisites</h6>

<ul>
  <li>Install git - postgres</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt-get install git postgresql libpq-dev
</code></pre></div></div>

<ul>
  <li>install rabbit-mq</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nt">-y</span> <span class="nb">install </span>socat logrotate init-system-helpers adduser erlang-base erlang-base-hipe esl-erlang
<span class="c"># download the package</span>
wget https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.10.6/rabbitmq-server_3.10.6-1_all.deb

<span class="c"># install the package with dpkg</span>
<span class="nb">sudo </span>dpkg <span class="nt">-i</span> rabbitmq-server_3.10.6-1_all.deb
<span class="nb">rm </span>rabbitmq-server_3.10.6-1_all.deb
</code></pre></div></div>
<ul>
  <li>installing conda
```
tmpdir=$(mktemp -d)
cd $tmpdir
wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
chmod +x Miniconda3-latest-Linux-x86_64.sh
    <h1 id="answer-yes-to-question-do-you-wish-the-installer-to-initialize-miniconda3-by-running-conda-init">answer yes to question Do you wish the installer to initialize Miniconda3 by running conda init?</h1>
    <p>bash Miniconda3-latest-Linux-x86_64.sh -p $HOME/miniconda3</p>
  </li>
</ul>

<p>cat .condarc
ssl_verify: false
shortcuts: false
report_errors: false</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
* install virtualenv
```bash
# only if pip is not installed
sudo apt-get install python3-pip build-essential
# upgrade pip, not necessary
sudo pip install --upgrade pip
# upgrade virtualenv
pip install --upgrade virtualenv
</code></pre></div></div>

<h6 id="step-2-get-evalai-code">Step 2: Get EvalAI code</h6>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/Cloud-CV/EvalAI.git
</code></pre></div></div>

<h6 id="step-3-setup-codebase">Step 3: Setup codebase</h6>

<ul>
  <li>Create a python virtual environment and install python dependencies.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#pour curl-config
sudo apt install libcurl4-openssl-dev libssl-dev
sudo apt install uwsgi-plugin-python3

cd evalai
# virtualenv venv
# source venv/bin/activate
conda create --name evalai_37  python=3.7
conda activate evalai_37

conda install -c conda-forge uwsgi
conda install -c conda-forge/label/gcc7 uwsgi
conda install -c conda-forge/label/broken uwsgi
conda install -c conda-forge/label/cf201901 uwsgi
conda install -c conda-forge/label/cf202003 uwsgi

sudo apt install gcc-9 gcc-10
sudo rm /usr/bin/gcc
sudo ln -s /usr/bin/gcc-9 /usr/bin/gcc 
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 80 --slave /usr/bin/g++ g++ /usr/bin/g++-11 --slave /usr/bin/gcov gcov /usr/bin/gcov-11
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 60 --slave /usr/bin/g++ g++ /usr/bin/g++-10 --slave /usr/bin/gcov gcov /usr/bin/gcov-10
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 40 --slave /usr/bin/g++ g++ /usr/bin/g++-9 --slave /usr/bin/gcov gcov /usr/bin/gcov-9
sudo update-alternatives --config gcc

conda install -c anaconda gcc_linux-64
conda install -c anaconda  gcc_linux-64==8.2.0


pip --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org install -r requirements/dev.txt
# issue on django-autofixture 
# https://github.com/gregmuellegger/django-autofixture/issues/117
</code></pre></div></div>

<ul>
  <li>Rename <code class="language-plaintext highlighter-rouge">settings/dev.sample.py</code> as <code class="language-plaintext highlighter-rouge">dev.py</code></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cp settings/dev.sample.py settings/dev.py
</code></pre></div></div>

<ul>
  <li>Create an empty postgres database and run database migration.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>createdb evalai -U postgres
# update postgres user password
psql -U postgres -c "ALTER USER postgres PASSWORD 'postgres';"
# run migrations
python manage.py migrate
</code></pre></div></div>

<ul>
  <li>For setting up frontend, please make sure that node(<code class="language-plaintext highlighter-rouge">&gt;=7.x.x</code>), npm(<code class="language-plaintext highlighter-rouge">&gt;=5.x.x</code>) and bower(<code class="language-plaintext highlighter-rouge">&gt;=1.8.x</code>) are installed globally on your machine. Install npm and bower dependencies by running</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install
bower install
</code></pre></div></div>]]></content><author><name></name></author><category term="logbook" /><summary type="html"><![CDATA[Week 26 - July 22]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://castorfou.github.io/guillaume_blog/images/logbook.jpg" /><media:content medium="image" url="https://castorfou.github.io/guillaume_blog/images/logbook.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Deep RL class - huggingface</title><link href="https://castorfou.github.io/guillaume_blog/blog/deep-rl-class-with-huggingface.html" rel="alternate" type="text/html" title="Deep RL class - huggingface" /><published>2022-06-15T00:00:00-05:00</published><updated>2022-06-15T00:00:00-05:00</updated><id>https://castorfou.github.io/guillaume_blog/blog/deep-rl-class-with-huggingface</id><content type="html" xml:base="https://castorfou.github.io/guillaume_blog/blog/deep-rl-class-with-huggingface.html"><![CDATA[<p>Didn’t mention that but I have started <a href="https://github.com/huggingface/deep-rl-class">The Hugging Face Deep Reinforcement Learning Class</a> by Thomas Simonini.</p>

<p>Thomas is now part of HuggingFace.</p>

<p>1st step is to fork the repo, and for mine it is <a href="https://github.com/castorfou/deep-rl-class">here</a>.</p>

<p>And clone it locally: <code class="language-plaintext highlighter-rouge">git clone git@github.com:castorfou/deep-rl-class.git</code> ou <code class="language-plaintext highlighter-rouge">git clone https://github.com/castorfou/deep-rl-class.git</code></p>

<p>I followed the 1st unit in May/11.</p>

<p>there is a community on discord at <a href="https://discord.gg/aYka4Yhff9">https://discord.gg/aYka4Yhff9</a>, with a lounge about RL.</p>

<h1 id="unit-1---introduction-to-deep-reinforcement-learning"><a href="https://github.com/huggingface/deep-rl-class/tree/main/unit1">Unit 1</a> - Introduction to Deep Reinforcement Learning</h1>

<h6 id="-it-starts-with-some-general-introduction-to-deep-rl-and-then-a-quizz">📖 It starts with some <a href="https://huggingface.co/blog/deep-rl-intro">general introduction to deep RL</a> and then a quizz.</h6>

<h6 id="-1st-practice-uses-this-lunar-lander-environment-and-you-train-a-ppo-agent-to-get-the-highest-score">👩‍💻 1st practice uses this lunar lander environment, and you train a PPO agent to get the highest score,</h6>

<ul>
  <li>and this runs on colab : <a href="https://github.com/huggingface/deep-rl-class/blob/main/unit1/unit1.ipynb">https://github.com/huggingface/deep-rl-class/blob/main/unit1/unit1.ipynb</a> (just by clicking on <img src="https://camo.githubusercontent.com/84f0493939e0c4de4e6dbe113251b4bfb5353e57134ffd9fcab6b8714514d4d1/68747470733a2f2f636f6c61622e72657365617263682e676f6f676c652e636f6d2f6173736574732f636f6c61622d62616467652e737667" alt="https://camo.githubusercontent.com/84f0493939e0c4de4e6dbe113251b4bfb5353e57134ffd9fcab6b8714514d4d1/68747470733a2f2f636f6c61622e72657365617263682e676f6f676c652e636f6d2f6173736574732f636f6c61622d62616467652e737667" />)</li>
  <li>there is a leaderboard running under huggingface (one can publish models to huggingface) <a href="https://huggingface.co/spaces/chrisjay/Deep-Reinforcement-Learning-Leaderboard">https://huggingface.co/spaces/chrisjay/Deep-Reinforcement-Learning-Leaderboard</a> . Just need an huggingface account for that (used my Michelin account)</li>
</ul>

<p>A guide has been recently added explaining how to tune hyperparameters using optuna. 👉 <a href="https://github.com/huggingface/deep-rl-class/blob/main/unit1/unit1_optuna_guide.ipynb">https://github.com/huggingface/deep-rl-class/blob/main/unit1/unit1_optuna_guide.ipynb</a>. Should do it!</p>

<p>To start unit2. Introduction to Q-Learning</p>

<ul>
  <li>first update from fork just by clicking<img src="https://docs.github.com/assets/cb-33131/images/help/repository/fetch-upstream-drop-down.png" alt="&quot;Fetch upstream&quot; drop-down" style="zoom:15%;" /></li>
  <li>and update your local repo (<code class="language-plaintext highlighter-rouge">git fetch</code> <code class="language-plaintext highlighter-rouge">git pull</code>)</li>
</ul>

<h1 id="unit-2---introduction-to-q-learning"><a href="https://github.com/huggingface/deep-rl-class/tree/main/unit2">Unit 2</a> - Introduction to Q-Learning</h1>

<h6 id="-part-1---we-learned-about-the-value-based-methods-and-the-difference-between-monte-carlo-and-temporal-difference-learning-then-a-quizz-easy-one">📖 <a href="https://huggingface.co/blog/deep-rl-q-part1">part 1</a> - we learned about the value-based methods and the difference between Monte Carlo and Temporal Difference Learning. Then a quizz (easy one)</h6>

<h6 id="-part-2---and-then-q-learning-which-is-an-off-policy-value-based-method-that-uses-a-td-approach-to-train-its-action-value-function-then-a-quizz-less-easier">📖 <a href="https://huggingface.co/blog/deep-rl-q-part2">part 2</a> - and then Q-learning which is an <strong>off-policy value-based method that uses a TD approach to train its action-value function</strong>. Then a quizz (less easier)</h6>

<h6 id="-hands-on-1st-algo-frozenlake-is-published-in-guillaume63q-frozenlake-v1-4x4-noslippery-2nd-algo-taxi-is-published-in-guillaume63q-taxi-v3-leaderboard-is-here">👩‍💻 <a href="https://colab.research.google.com/github/huggingface/deep-rl-class/blob/main/unit2/unit2.ipynb">hands-on</a>. 1st algo (FrozenLake) is published in <a href="https://huggingface.co/Guillaume63/q-FrozenLake-v1-4x4-noSlippery">Guillaume63/q-FrozenLake-v1-4x4-noSlippery</a>. 2nd algo (Taxi) is published in <a href="https://huggingface.co/Guillaume63/q-Taxi-v3">Guillaume63/q-Taxi-v3</a>. Leaderboard is <a href="https://huggingface.co/spaces/chrisjay/Deep-Reinforcement-Learning-Leaderboard">here</a></h6>

<h1 id="unit-3---deep-q-learning-with-atari-games"><a href="https://github.com/huggingface/deep-rl-class/tree/main/unit3">Unit 3</a> - Deep Q-Learning with Atari Games</h1>

<h6 id="-the-deep-q-learning-chapter----httpshuggingfacecoblogdeep-rl-dqn">📖 The Deep Q-Learning chapter 👾 👉  <a href="https://huggingface.co/blog/deep-rl-dqn">https://huggingface.co/blog/deep-rl-dqn</a></h6>

<h6 id="-start-the-hands-on-here--httpscolabresearchgooglecomgithubhuggingfacedeep-rl-classblobmainunit3unit3ipynb">👩‍💻 Start the hands-on here 👉 <a href="https://colab.research.google.com/github/huggingface/deep-rl-class/blob/main/unit3/unit3.ipynb">https://colab.research.google.com/github/huggingface/deep-rl-class/blob/main/unit3/unit3.ipynb</a></h6>

<p>from discord, a video (30’) by Antonin Raffin about <a href="https://www.youtube.com/watch?v=AidFTOdGNFQ">Automatic Hyperparameter Optimization @ ICRA 22 - Tools for Robotic RL 6/8</a>. Never thought about it that way, it can help to speed training phase.</p>

<p>from discord as well a video to build a <a href="https://www.youtube.com/watch?v=eBCU-tqLGfQ">doom ai model</a> (3 hours!)</p>

<p>and from discord a lecture from Pieter Abbeel explaining Q-value to DQN and why we have this double network at <a href="https://www.youtube.com/watch?v=Psrhxy88zww">L2 Deep Q-Learning (Foundations of Deep RL Series</a>. This is part of a larger lecture available at <a href="https://www.youtube.com/watch?v=2GwBez0D20A&amp;list=PLwRJQ4m4UJjNymuBM9RdmB3Z9N5-0IlY0">Foundations of Deep RL – 6-lecture series by Pieter Abbeel</a></p>

<p>And then a video explaining <a href="https://agarwl.github.io/rliable/">Deep RL at the Edge of the Statistical Precipice</a>. This was from a paper at Neurips.</p>

<h1 id="unit-4---an-introduction-to-unity-ml-agents-with-hugging-face-"><a href="https://github.com/huggingface/deep-rl-class/tree/main/unit4">Unit 4</a> - An Introduction to <strong>Unity ML-Agents with Hugging Face 🤗</strong></h1>

<h6 id="-tutorial--httpslinkmediumcomkopvpdyz4qb">📖 <strong>tutorial</strong> 👉 https://link.medium.com/KOpvPdyz4qb</h6>

<p>Thomas starts with evolutions on RL domain, citing <a href="https://huggingface.co/blog/decision-transformers">Decision Transformers</a> as one of the last hot topic. And then introduces Unity and how it can now be used with RL agents.</p>

<p><img src="https://miro.medium.com/max/1400/0*kYixBHKWwmY65Mg_" alt="unity ML-Agents toolkit" /></p>

<p>Interesting idea to introduce <a href="https://medium.com/data-from-the-trenches/curiosity-driven-learning-through-next-state-prediction-f7f4e2f592fa">curiosity</a> and to make it real as an intrinsic reward.</p>

<blockquote>
  <p><em>Note: It guided me to gentle introductions to <a href="https://machinelearningmastery.com/cross-entropy-for-machine-learning/">cross-entropy for machine learning</a> and <a href="https://machinelearningmastery.com/what-is-information-entropy/">information entropy</a>.</em></p>

  <ul>
    <li>
      <p><em><strong>Low Probability Event</strong> (surprising): More information. High entropy.</em></p>
    </li>
    <li>
      <p><em><strong>Higher Probability Event</strong> (unsurprising): Less information. Low entropy.</em></p>
    </li>
    <li>
      <p><em><strong>Skewed Probability Distribution</strong> (unsurprising): Low entropy.</em></p>
    </li>
    <li>
      <p><em><strong>Balanced Probability Distribution</strong> (surprising): High entropy.</em></p>
    </li>
  </ul>

  <span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>I</mi><mi>n</mi><mi>f</mi><mi>o</mi><mi>r</mi><mi>m</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>:</mo><mspace linebreak="newline"></mspace><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>P</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Information:

\\h(x)=-\log(P(x))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal">ma</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">))</span></span></span></span></span>

  <span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mi>n</mi><mi>t</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>y</mi><mo>:</mo><mspace linebreak="newline"></mspace><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mtext>–</mtext><munder><mo>∑</mo><mrow><mi>x</mi><mo>∈</mo><mi>X</mi></mrow></munder><mi>P</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>P</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Entropy:
\\H(X) = – \sum_{x \in X} P(x)  \log(P(x))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal">ro</span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3717em;vertical-align:-1.3217em;"></span><span class="mord">–</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.8557em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3217em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">))</span></span></span></span></span>

  <span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>C</mi><mi>r</mi><mi>o</mi><mi>s</mi><mi>s</mi><mo>−</mo><mi>E</mi><mi>n</mi><mi>t</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>y</mi><mo>:</mo><mspace linebreak="newline"></mspace><mi>H</mi><mo stretchy="false">(</mo><mi>P</mi><mo separator="true">,</mo><mi>Q</mi><mo stretchy="false">)</mo><mo>=</mo><mtext>–</mtext><munder><mo>∑</mo><mrow><mi>x</mi><mo>∈</mo><mi>X</mi></mrow></munder><mi>P</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>Q</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Cross-Entropy:\\H(P, Q) = – \sum_{x \in X} P(x)  \log(Q(x))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">ross</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal">ro</span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">Q</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3717em;vertical-align:-1.3217em;"></span><span class="mord">–</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.8557em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3217em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathnormal">Q</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">))</span></span></span></span></span>

  <p>Cross-Entropy and KL divergence are similar but not exactly the same. Specifically, the KL divergence measures a very similar quantity to  cross-entropy. It measures the average number of extra bits required to  represent a message with Q instead of P, not the total number of bits.</p>

  <span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>K</mi><mi>L</mi><mtext> </mtext><mi>D</mi><mi>i</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>n</mi><mi>c</mi><mi>e</mi><mtext> </mtext><mo stretchy="false">(</mo><mi>r</mi><mi>e</mi><mi>l</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>e</mi><mtext> </mtext><mi>e</mi><mi>n</mi><mi>t</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>y</mi><mo stretchy="false">)</mo><mo>:</mo><mspace linebreak="newline"></mspace><mi>K</mi><mi>L</mi><mo stretchy="false">(</mo><mi>P</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>Q</mi><mo stretchy="false">)</mo><mo>=</mo><mtext>–</mtext><munder><mo>∑</mo><mrow><mi>x</mi><mo>∈</mo><mi>X</mi></mrow></munder><mi>P</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mfrac><mrow><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>Q</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><mrow><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>P</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mfrac><mspace linebreak="newline"></mspace><mi>H</mi><mo stretchy="false">(</mo><mi>P</mi><mo separator="true">,</mo><mi>Q</mi><mo stretchy="false">)</mo><mo>=</mo><mi>H</mi><mo stretchy="false">(</mo><mi>P</mi><mo stretchy="false">)</mo><mo>+</mo><mi>K</mi><mi>L</mi><mo stretchy="false">(</mo><mi>P</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>Q</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">KL\ Divergence\ (relative\ entropy):
\\KL(P||Q)=– \sum_{x \in X} P(x)  \frac{\log(Q(x))}{\log(P(x))}
\\H(P, Q) = H(P) + KL(P || Q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord mathnormal">L</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal" style="margin-right:0.02778em;">er</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">ce</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathnormal">re</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mspace"> </span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal">ro</span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord mathnormal">L</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord">∣∣</span><span class="mord mathnormal">Q</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.7487em;vertical-align:-1.3217em;"></span><span class="mord">–</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.8557em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3217em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">))</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathnormal">Q</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">))</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">Q</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord mathnormal">L</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord">∣∣</span><span class="mord mathnormal">Q</span><span class="mclose">)</span></span></span></span></span>

</blockquote>

<h6 id="-here-are-the-steps-for-the-training">👩‍💻 Here are the steps for the training:</h6>

<ul>
  <li>clone repo and install environment</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># from ~/git/guillaume</span>
git clone https://github.com/huggingface/ml-agents/
<span class="c"># bug with python 3.9 - https://github.com/Unity-Technologies/ml-agents/issues/5689</span>
conda create  <span class="nt">--name</span> ml-agents <span class="nv">python</span><span class="o">=</span>3.8
conda activate ml-agents
<span class="c"># Go inside the repository and install the package </span>
<span class="nb">cd </span>ml-agents 
pip <span class="nb">install</span> <span class="nt">-e</span> ./ml-agents-envs 
pip <span class="nb">install</span> <span class="nt">-e</span> ./ml-agents
</code></pre></div></div>

<ul>
  <li>download the Environment Executable (pyramids from <a href="https://drive.google.com/drive/folders/1cjUOCB6gikJHmOnoQ5R9oM7-_zAFXuA2">google drive</a>)</li>
</ul>

<p>Unzip it and place it inside the MLAgents cloned repo <strong>in a new folder called trained-envs-executables/linux</strong></p>

<ul>
  <li>modify nbr of steps to 1000000 in <code class="language-plaintext highlighter-rouge">config/ppo/PyramidsRND.yaml</code></li>
  <li>train</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mlagents-learn config/ppo/PyramidsRND.yaml <span class="nt">--env</span><span class="o">=</span>training-envs-executables/linux/Pyramids/Pyramids <span class="nt">--run-id</span><span class="o">=</span><span class="s2">"First Training"</span> <span class="nt">--no-graphics</span>
</code></pre></div></div>

<ul>
  <li>monitor training</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tensorboard <span class="nt">--logdir</span> results <span class="nt">--port</span> 6006
</code></pre></div></div>

<p>(auto reload is off by default this day, click settings and check Reload data) (because I have installed v2.3.0 and not 2.4.0, there is <a href="https://github.com/tensorflow/tensorboard/issues/1946">no autofit domain to data</a> and it is annoying)</p>

<ul>
  <li>push to 🤗 Hub</li>
</ul>

<p>Create a new token (https://huggingface.co/settings/tokens) <strong>with write role</strong></p>

<p>Copy the token, Run this and past the token <code class="language-plaintext highlighter-rouge">huggingface-cli login</code></p>

<p>Push to Hub</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mlagents-push-to-hf <span class="nt">--run-id</span><span class="o">=</span><span class="s1">'First Training'</span> <span class="nt">--local-dir</span><span class="o">=</span><span class="s1">'results/First Training'</span> <span class="nt">--repo-id</span><span class="o">=</span><span class="s1">'Guillaume63/MLAgents-Pyramids'</span> <span class="nt">--commit-message</span><span class="o">=</span><span class="s1">'Trained pyramids agent upload'</span>
</code></pre></div></div>

<p>and now I can play it from <a href="https://huggingface.co/Guillaume63/MLAgents-Pyramids">https://huggingface.co/Guillaume63/MLAgents-Pyramids</a> and watch your Agent play…</p>

<h1 id="unit-5---policy-gradient-with-pytorch"><a href="https://github.com/huggingface/deep-rl-class/tree/main/unit5">Unit 5</a> - Policy Gradient with PyTorch</h1>

<h6 id="1️⃣--read-policy-gradient-with-pytorch-chapter">1️⃣ 📖 <strong>Read <a href="https://huggingface.co/blog/deep-rl-pg">Policy Gradient with PyTorch Chapter</a></strong>.</h6>

<p>Advantage and disadvantage of policy gradient vs DQN.</p>

<p>Reinforce algorithm (Monte Carlo policy gradient): it uses an estimated return from an entire episode to update the policy parameters.</p>

<p>The output of it is a probability distribution of actions. And we try to maximize J(θ) which is this estimated return. (details of Policy Gradient theorem in this <a href="https://www.youtube.com/watch?v=AKbX1Zvo7r8&amp;ab_channel=PieterAbbeel">video</a> from Pieter Abbeel)</p>

<p>We will update weights using this gradient: 
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi><mo>←</mo><mi>θ</mi><mo>+</mo><mi>α</mi><msub><mi mathvariant="normal">∇</mi><mi>θ</mi></msub><mi>J</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\theta \gets  \theta + \alpha\nabla_\theta J(\theta)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">←</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord"><span class="mord">∇</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span>
<img src="https://huggingface.co/blog/assets/85_policy_gradient/pg.jpg" alt="" /></p>

<ul>
  <li>
    <p>$\nabla_\theta\log\pi_\theta(a_t | s_t)$ is the direction of <strong>steepest increase of the (log) probability</strong> of selecting action at from state $s_t$. =&gt; This tells use <strong>how we should change the weights of policy</strong> if we want to increase/decrease the log probability of selecting action at state $s_t$.</p>
  </li>
  <li>
    <p>$R(\tau)$ is the scoring function:</p>

    <ul>
      <li>If the return is high, it will push up the probabilities of the (state, action) combinations.</li>
      <li>Else, if the return is low, it will push down the probabilities of the (state, action) combinations.</li>
    </ul>
  </li>
</ul>

<h6 id="2️⃣--then-dive-on-the-hands-on-where-youll-code-your-first-deep-reinforcement-learning-algorithm-from-scratch-reinforce">2️⃣ 👩‍💻 Then dive on the hands-on where you’ll <strong>code your first Deep Reinforcement Learning algorithm from scratch: Reinforce</strong>.</h6>

<p>👉 <a href="https://colab.research.google.com/github/huggingface/deep-rl-class/blob/main/unit5/unit5.ipynb">https://colab.research.google.com/github/huggingface/deep-rl-class/blob/main/unit5/unit5.ipynb</a></p>

<p>1st model is Cartpole. After training on 10’000 episodes, perfect score of 500 +- 0. Thomas pointed me to a <a href="https://www.youtube.com/watch?v=Ikngt0_DXJg&amp;ab_channel=ANITIToulouse">video</a> (3h) from Aniti where Antonin Raffin gives some tips and tricks. And points to many papers such as <a href="https://arxiv.org/abs/1709.06560">Deep Reinforcement Learning that Matters</a> (in zotero)</p>

<p>2nd model is Pixelcopter. High level of variance in perf. Recommended by Thomas to tune hyper parameters (optuna?).</p>

<p>3rd model is Pong.</p>]]></content><author><name></name></author><category term="reinforcement learning" /><category term="huggingface" /><summary type="html"><![CDATA[par Thomas Simonini]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://castorfou.github.io/guillaume_blog/images/RL.png" /><media:content medium="image" url="https://castorfou.github.io/guillaume_blog/images/RL.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Logbook for June 22</title><link href="https://castorfou.github.io/guillaume_blog/blog/logbook-June-22.html" rel="alternate" type="text/html" title="Logbook for June 22" /><published>2022-06-01T00:00:00-05:00</published><updated>2022-06-01T00:00:00-05:00</updated><id>https://castorfou.github.io/guillaume_blog/blog/logbook-June-22</id><content type="html" xml:base="https://castorfou.github.io/guillaume_blog/blog/logbook-June-22.html"><![CDATA[<h2 id="week-24---june-22">Week 24 - June 22</h2>

<p><strong>Wednesday 6/15</strong></p>

<ul>
  <li>continue <a href="/guillaume_blog/blog/deep-rl-class-with-huggingface.html">deep rl class</a> with unit 2, interesting notebook to learn about using optuna to tune hyperparameters</li>
</ul>

<p><strong>Friday 6/17</strong></p>

<ul>
  <li>Sylvain pointed me to a paper from X: <a href="https://arxiv.org/abs/2206.06841">Robust Reinforcement Learning with Distributional Risk-averse formulation</a> now in <a href="https://www.zotero.org/guillaumeramelet/collections/P7DX6A6B/items/EB3XCB4Z/collection">zotero</a> to use distribution information to strengthen RL epxloration. To be read and tested</li>
</ul>]]></content><author><name></name></author><category term="logbook" /><summary type="html"><![CDATA[Week 24 - June 22]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://castorfou.github.io/guillaume_blog/images/logbook.jpg" /><media:content medium="image" url="https://castorfou.github.io/guillaume_blog/images/logbook.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">save git https credentials under wsl</title><link href="https://castorfou.github.io/guillaume_blog/blog/save-git-https-credentials-under-wsl.html" rel="alternate" type="text/html" title="save git https credentials under wsl" /><published>2022-05-03T00:00:00-05:00</published><updated>2022-05-03T00:00:00-05:00</updated><id>https://castorfou.github.io/guillaume_blog/blog/save%20git%20https%20credentials%20under%20wsl</id><content type="html" xml:base="https://castorfou.github.io/guillaume_blog/blog/save-git-https-credentials-under-wsl.html"><![CDATA[<h2 id="source-of-inspiration">source of inspiration</h2>

<p>Microsoft has released a tool to securely keep https credentials:</p>

<p><a href="https://github.com/GitCredentialManager/git-credential-manager">git-credential-manager</a></p>

<p>Usefull when one has to use https instead of git(ssl) to connect to git repos. My case when I am behing my corporate firewall and has to link to github repos (such as this blog)</p>

<h2 id="how-to-setup-it">How to setup it</h2>

<h4 id="create-token-in-github">create token in github</h4>

<p>I have to create a token at Settings &gt; Developer Settings &gt; Personal Access Tokens</p>

<h4 id="installation-of-git-credential-manager-inside-wsl">installation of git-credential-manager inside WSL</h4>

<p>Download the latest (v2.0.696 at May/3rd 2022) <a href="https://github.com/GitCredentialManager/git-credential-manager/releases/latest">.deb package</a>, and run the following:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>dpkg <span class="nt">-i</span> &lt;path-to-package&gt;
git-credential-manager-core configure
git config <span class="nt">--global</span> credential.credentialStore gpg
<span class="nb">export </span><span class="nv">GPG_TTY</span><span class="o">=</span><span class="si">$(</span><span class="nb">tty</span><span class="si">)</span>
gpg <span class="nt">--full-generate-key</span>
<span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> pass
<span class="nv">key_id</span><span class="o">=</span><span class="sb">`</span>gpg <span class="nt">--list-keys</span> | <span class="nb">awk</span> <span class="nt">-F</span>: <span class="s1">'/^ / { print $0 }'</span> | <span class="nb">cut</span> <span class="nt">-d</span><span class="s2">" "</span> <span class="nt">-f7</span><span class="sb">`</span>
pass init <span class="nv">$key_id</span>
</code></pre></div></div>

<p>or see the step 06 in <a href="https://castorfou.github.io/guillaume_blog/blog/install-ubuntu-22.04-on-WSL.html">install ubuntu 22.04 on WSL</a></p>]]></content><author><name></name></author><category term="git" /><summary type="html"><![CDATA[git-credential-manager]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://castorfou.github.io/guillaume_blog/images/git.png" /><media:content medium="image" url="https://castorfou.github.io/guillaume_blog/images/git.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">upgrade to last version of fastpages</title><link href="https://castorfou.github.io/guillaume_blog/blog/upgrade-fastpages.html" rel="alternate" type="text/html" title="upgrade to last version of fastpages" /><published>2022-05-02T00:00:00-05:00</published><updated>2022-05-02T00:00:00-05:00</updated><id>https://castorfou.github.io/guillaume_blog/blog/upgrade-fastpages</id><content type="html" xml:base="https://castorfou.github.io/guillaume_blog/blog/upgrade-fastpages.html"><![CDATA[<h2 id="source-of-inspiration">source of inspiration</h2>

<p>as detailed in <a href="https://github.com/fastai/fastpages/issues/634">https://github.com/fastai/fastpages/issues/634</a></p>

<p>Hamel asks to restart from a new repo. But how to keep the same blog url?</p>

<p>Easy way is to rename former repo (from <code class="language-plaintext highlighter-rouge">guillaume_blog</code> to <code class="language-plaintext highlighter-rouge">guillaume_blog_old</code>) and initiate new repo as former one (<code class="language-plaintext highlighter-rouge">guillaume_blog</code>).</p>

<p>Here are the steps.</p>

<h2 id="installation-and-setup">Installation and setup</h2>

<h3 id="installation">Installation</h3>

<ol>
  <li>Generate a copy of <a href="https://github.com/fastai/fastpages#setup-instructions">fastpages repo</a>. Just have to follow instructions by clicking at https://github.com/fastai/fastpages/generate. Name repo as <code class="language-plaintext highlighter-rouge">guillaume_blog</code></li>
  <li>Click on the PR <code class="language-plaintext highlighter-rouge">Initial Setup</code> in your new repo. There are instructions to create a SSH_DEPLOY_KEY.</li>
  <li>Merge this PR</li>
  <li>Clone this repo locally</li>
  <li>Because I use https, I have to create a token at Settings &gt; Developer Settings &gt; Personal Access Tokens</li>
  <li>and to keep this token locally, I enter <code class="language-plaintext highlighter-rouge">git config --global credential.helper manager</code> before pushing</li>
</ol>

<h3 id="copy-content">Copy content</h3>

<ol>
  <li>Directories: <code class="language-plaintext highlighter-rouge">_notebooks</code>, <code class="language-plaintext highlighter-rouge">_posts</code>, <code class="language-plaintext highlighter-rouge">_files</code>, <code class="language-plaintext highlighter-rouge">_images</code></li>
  <li>Clean content from directories (examples) in  <code class="language-plaintext highlighter-rouge">_notebooks</code>, <code class="language-plaintext highlighter-rouge">_posts</code>, <code class="language-plaintext highlighter-rouge">_words</code></li>
  <li>Pages: <code class="language-plaintext highlighter-rouge">_pages/about.md</code>, <code class="language-plaintext highlighter-rouge">index.html</code>, <code class="language-plaintext highlighter-rouge">README.md</code></li>
  <li>and utils: <code class="language-plaintext highlighter-rouge">refresh_blog_content.sh</code>, <code class="language-plaintext highlighter-rouge">publish.sh</code></li>
</ol>]]></content><author><name></name></author><category term="fastpages" /><summary type="html"><![CDATA[following bug with pyYaml]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://castorfou.github.io/guillaume_blog/images/icons/fastai.png" /><media:content medium="image" url="https://castorfou.github.io/guillaume_blog/images/icons/fastai.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">install ubuntu 22.04 on WSL</title><link href="https://castorfou.github.io/guillaume_blog/blog/install-ubuntu-22.04-on-WSL.html" rel="alternate" type="text/html" title="install ubuntu 22.04 on WSL" /><published>2022-04-25T00:00:00-05:00</published><updated>2022-04-25T00:00:00-05:00</updated><id>https://castorfou.github.io/guillaume_blog/blog/install%20ubuntu%2022.04%20on%20WSL</id><content type="html" xml:base="https://castorfou.github.io/guillaume_blog/blog/install-ubuntu-22.04-on-WSL.html"><![CDATA[<h2 id="source-of-inspiration">source of inspiration</h2>

<p><a href="https://www.windowscentral.com/how-install-ubuntu-2110-wsl-windows-10-and-11">How to install Ubuntu 21.10 on WSL for Windows 10 and 11</a></p>

<h2 id="installation">Installation</h2>

<h3 id="uninstall-image-if-needed">uninstall image (if needed)</h3>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># wsl --unregister &lt;distroName&gt;</span><span class="w">
</span><span class="n">wsl</span><span class="w"> </span><span class="nt">--unregister</span><span class="w"> </span><span class="nx">ubuntu-22.04</span><span class="w">
</span></code></pre></div></div>

<h3 id="download-images">download images</h3>

<p>From <a href="https://cloud-images.ubuntu.com/jammy/current/">cloud images ubuntu</a> (cloud-images &gt; jammy &gt; current), now there are wsl images:</p>

<p><img src="https://www.windowscentral.com/sites/wpcentral.com/files/styles/larger/public/field/image/2022/01/ubuntu-cloud-images-website.png" alt="ubuntu cloud images" /></p>

<p>I just have to download the last jammy (22.04) image <code class="language-plaintext highlighter-rouge">jammy-server-cloudimg-amd64-wsl.rootfs.tar.gz</code></p>

<h3 id="install-and-setup-from-powershell">install and setup from powershell</h3>

<p>I have downloaded this ubuntu image to <code class="language-plaintext highlighter-rouge">D:\wsl\ubuntu-22.04\download</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>base<span class="o">)</span> guillaume@LL11LPC0PQARQ:/mnt/d/wsl<span class="nv">$ </span>tree
<span class="nb">.</span>
├── Ubuntu-20.04
│   └── ext4.vhdx
├── Ubuntu-22.04
│   ├── download
│   │   └── jammy-server-cloudimg-amd64-wsl.rootfs.tar.gz
│   └── instance
</code></pre></div></div>

<p>and my <code class="language-plaintext highlighter-rouge">ubuntu-22.04</code> instance will stand in <code class="language-plaintext highlighter-rouge">D:\wsl\ubuntu-22.04\instance</code></p>

<p>Install with this command from powershell</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># wsl --import &lt;distroname&gt; &lt;location of instance&gt; &lt;location of download&gt;</span><span class="w">
</span><span class="n">wsl</span><span class="w"> </span><span class="nt">--import</span><span class="w"> </span><span class="nx">ubuntu-22.04</span><span class="w"> </span><span class="nx">D:\wsl\ubuntu-22.04\instance</span><span class="w"> </span><span class="nx">D:\wsl\ubuntu-22.04\download\jammy-server-cloudimg-amd64-wsl.rootfs.tar.gz</span><span class="w">
</span></code></pre></div></div>

<p>It takes 3-4 minutes to install. and should be visible in your wsl instances.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w"> </span><span class="n">wsl</span><span class="w"> </span><span class="nt">--list</span><span class="w"> </span><span class="nt">--all</span><span class="w"> </span><span class="nt">-v</span><span class="w">
  </span><span class="n">NAME</span><span class="w">            </span><span class="nx">STATE</span><span class="w">           </span><span class="nx">VERSION</span><span class="w">
  </span><span class="n">ubuntu-22.04</span><span class="w">    </span><span class="nx">Stopped</span><span class="w">         </span><span class="nx">2</span><span class="w">
</span></code></pre></div></div>

<p>then to run it</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># wsl -d &lt;distroname&gt;</span><span class="w">
</span><span class="n">wsl</span><span class="w"> </span><span class="nt">-d</span><span class="w"> </span><span class="nx">ubuntu-22.04</span><span class="w">
</span></code></pre></div></div>

<p>or</p>

<h4 id="use-windows-terminal-as-a-launcher">use Windows Terminal as a launcher</h4>

<p>Windows Terminal is a smart way to group all terminals (powershell, and all your wsl instances)</p>

<p><img src="../images/windows_terminal.jpg" alt="windows terminal" /></p>

<p>It can be installed even with limited windows store access by clicking install in <a href="https://docs.microsoft.com/fr-fr/windows/terminal/install">Installer le Terminal Windows et commencer à le configurer</a></p>

<p>Automatically all wsl instances appear in Settings.</p>

<h2 id="automatic-setup">Automatic setup</h2>

<p>copy these 2 <a href="https://github.com/castorfou/guillaume_blog/tree/master/files">scripts</a> in /root/ (given they are in <code class="language-plaintext highlighter-rouge">D:\wsl\ubuntu-22.04\download</code>)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cp</span> /mnt/d/wsl/Ubuntu-22.04/download/setup_wsl_<span class="k">*</span> <span class="nb">.</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">setup_wsl_root.sh</code> <a href="../files/setup_wsl_root.sh">download</a></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="nb">echo</span> <span class="s2">"0. get username: "</span>
<span class="nb">read </span>user_name

<span class="nb">.</span> /etc/lsb-release

<span class="nb">echo </span>Configuration <span class="k">for </span>user <span class="o">[</span><span class="nv">$user_name</span><span class="o">]</span>
<span class="nb">echo </span>of distribution <span class="nv">$DISTRIB_CODENAME</span>
<span class="nb">echo

echo</span> <span class="s2">"1. create user and add in sudo"</span>
<span class="c">#adduser --disabled-password --gecos "" $user_name</span>
adduser <span class="nt">--gecos</span> <span class="s2">""</span> <span class="nv">$user_name</span>
usermod <span class="nt">-aG</span> <span class="nb">sudo</span> <span class="nv">$user_name</span>
<span class="nb">echo

echo</span> <span class="s2">"2. create wsl.conf file"</span>
<span class="nb">rm</span> <span class="nt">-rf</span> /etc/wsl.conf
<span class="nb">tee</span> /etc/wsl.conf <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
# Set the user when launching a distribution with WSL.
[user]
default=</span><span class="nv">$user_name</span><span class="sh">
</span><span class="no">EOF
</span><span class="nb">echo

echo</span> <span class="s2">"3. prepare setup by user"</span>
<span class="nb">cp </span>setup_wsl_user.sh /home/<span class="nv">$user_name</span>
<span class="nb">chown</span> <span class="nv">$user_name</span>:users /home/<span class="nv">$user_name</span>/setup_wsl_user.sh
<span class="nb">chmod </span>750  /home/<span class="nv">$user_name</span>/setup_wsl_user.sh
<span class="nb">tee</span> <span class="nt">-a</span> /home/<span class="nv">$user_name</span>/.bashrc <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
if [ ! -e ".wsl_configured" ]; then
		./setup_wsl_user.sh
        touch .wsl_configured
fi
</span><span class="no">EOF
</span><span class="nb">echo

echo</span> <span class="s2">"end of configuration for root"</span>
<span class="nb">echo</span> <span class="s2">"stop wsl instance by running 'wsl -t &lt;distro-name&gt;' from powershell"</span>
<span class="nb">echo</span> <span class="s2">"and start from Windows Terminal"</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">setup_wsl_user.sh</code> <a href="../files/setup_wsl_user.sh">download</a></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="nb">echo</span> <span class="s2">"1. setup wsl-vpnkit"</span>
<span class="k">if </span><span class="nb">grep</span> <span class="nt">-Fxq</span> <span class="s2">"wsl-vpnkit"</span> ~/.profile
<span class="k">then</span>
    <span class="c"># code if found</span>
	<span class="nb">echo</span> <span class="s2">"   wsl-vpnkit already setup"</span>
<span class="k">else</span>
    <span class="c"># code if not found</span>
	<span class="nb">echo</span> <span class="s1">'wsl.exe -d wsl-vpnkit service wsl-vpnkit start'</span> <span class="o">&gt;&gt;</span> ~/.profile
<span class="k">fi
</span>wsl.exe <span class="nt">-d</span> wsl-vpnkit service wsl-vpnkit start
<span class="nb">source</span> ./.bashrc
<span class="nb">echo

echo</span> <span class="s2">"2. create ssh key to copy to gitlab"</span>
<span class="nb">.</span> /etc/lsb-release
<span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-e</span> <span class="s2">".ssh/id_rsa.pub"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
		</span>ssh-keygen <span class="nt">-t</span> rsa <span class="nt">-b</span> 4096 <span class="nt">-C</span> <span class="s2">"WSL2 ubuntu </span><span class="nv">$DISTRIB_RELEASE</span><span class="s2">"</span>
		<span class="nb">cat</span> .ssh/id_rsa.pub
		<span class="nb">echo</span> <span class="s2">"copy this content to gitlab &gt; preferences &gt; SSH Keys"</span>
		<span class="nb">read</span> <span class="nt">-p</span> <span class="s2">"Press any key to resume ..."</span>
<span class="k">fi
</span><span class="nb">echo

echo</span> <span class="s2">"3. update certificates"</span>
git clone git@gitlab.michelin.com:devops-foundation/devops_environment.git /tmp/devops_environment
<span class="nb">sudo cp</span> /tmp/devops_environment/certs/<span class="k">*</span> /usr/local/share/ca-certificates/
<span class="nb">sudo </span>update-ca-certificates
<span class="nb">rm</span> <span class="nt">-rf</span> /tmp/devops_environment
<span class="k">if</span> <span class="o">[</span> <span class="nv">$DISTRIB_RELEASE</span> <span class="o">==</span> <span class="s2">"22.04"</span> <span class="o">]</span>
<span class="k">then
</span><span class="nb">echo</span> <span class="s1">'bug SSL with ubuntu 22.04 - https://bugs.launchpad.net/ubuntu/+source/openssl/+bug/1963834/comments/7'</span>
<span class="nb">sudo tee</span> <span class="nt">-a</span> /etc/ssl/openssl.cnf <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
[openssl_init]
ssl_conf = ssl_sect

[ssl_sect]
system_default = system_default_sect

[system_default_sect]
Options = UnsafeLegacyRenegotiation
</span><span class="no">EOF
</span><span class="k">fi
</span><span class="nb">echo

echo</span> <span class="s2">"4. update apt sources with artifactory"</span>
<span class="nb">echo</span> <span class="s1">'Acquire { http::User-Agent "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:13.37) Gecko/20100101 Firefox/31.33.7"; };'</span> | <span class="nb">sudo tee</span> /etc/apt/apt.conf.d/90globalprotectconf
<span class="nb">sudo sed</span> <span class="nt">-i</span> <span class="s1">'s,http://archive.ubuntu.com/ubuntu,https://artifactory.michelin.com/artifactory/ubuntu-archive-remote,g'</span> /etc/apt/sources.list
<span class="nb">sudo sed</span> <span class="nt">-i</span> <span class="s1">'s,http://security.ubuntu.com/ubuntu,https://artifactory.michelin.com/artifactory/ubuntu-archive-remote,g'</span> /etc/apt/sources.list
<span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt upgrade <span class="nt">-y</span>
<span class="nb">echo</span>
</code></pre></div></div>

<p>Then</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x setup_wsl_root.sh
./setup_wsl_root.sh
</code></pre></div></div>

<p>As explained stop wsl instance by running <code class="language-plaintext highlighter-rouge">wsl --shutdown ubuntu-22.04</code> from powershell
and start from Windows Terminal</p>

<p>It restarts from your user and it will install:</p>

<ul>
  <li>setup wsl-vpnkit</li>
  <li>create ssh key to copy to gitlab</li>
  <li>update certificates</li>
  <li>update apt sources with artifactory</li>
</ul>

<h2 id="and-now-we-can-install-other-parts">And now we can install other parts</h2>

<p>all the scripts are in <a href="https://github.com/castorfou/guillaume_blog/tree/master/files">https://github.com/castorfou/guillaume_blog/tree/master/files</a></p>

<h3 id="00---keep-config-files-in-git">00 - keep config files in git</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget <span class="nt">--no-check-certificate</span> <span class="nt">--content-disposition</span> <span class="nt">-O</span> - https://raw.githubusercontent.com/castorfou/guillaume_blog/master/files/setup_wsl_00_config_files_in_git.sh | bash
<span class="nb">source</span> .bashrc
</code></pre></div></div>

<h3 id="01---automount-secured-vbox">01 - automount secured vbox</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget <span class="nt">--no-check-certificate</span> <span class="nt">--content-disposition</span> <span class="nt">-O</span> - https://raw.githubusercontent.com/castorfou/guillaume_blog/master/files/setup_wsl_01_automount_secured_vbox.sh | bash
</code></pre></div></div>

<h3 id="02---python-with-conda-and-configure-base-environment-jupyterlab-mamba">02 - python with conda and configure base environment (jupyterlab, mamba)</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget <span class="nt">--no-check-certificate</span> <span class="nt">--content-disposition</span> <span class="nt">-O</span> - https://raw.githubusercontent.com/castorfou/guillaume_blog/master/files/setup_wsl_02_install_python_conda_part1.sh | bash
<span class="nb">cd 
source</span> .bashrc
wget <span class="nt">--no-check-certificate</span> <span class="nt">--content-disposition</span> <span class="nt">-O</span> - https://raw.githubusercontent.com/castorfou/guillaume_blog/master/files/setup_wsl_02_install_python_conda_part2.sh | bash
</code></pre></div></div>

<h3 id="03---bat-cat">03 - bat cat</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget <span class="nt">--no-check-certificate</span> <span class="nt">--content-disposition</span> <span class="nt">-O</span> - https://raw.githubusercontent.com/castorfou/guillaume_blog/master/files/setup_wsl_03_install_batcat.sh | bash
<span class="nb">source</span> .bashrc
</code></pre></div></div>

<h3 id="04---git-access">04 - git access</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ln</span> <span class="nt">-s</span> /mnt/d/git/ ~/
</code></pre></div></div>

<h3 id="05---x-access-with-gwsl">05 - X access with GWSL</h3>

<p><a href="https://opticos.github.io/gwsl/">GWSL Homepage</a></p>

<p>if you have access to <a href="https://apps.microsoft.com/store/detail/gwsl/9NL6KD1H33V3?hl=fr-fr&amp;gl=FR">Windows Store</a>, it is available.</p>

<p>Or alternate download are possible.</p>

<p><img src="..\images\GWSL_Dashboard.jpg" alt="" /></p>

<h3 id="06---git-credential-manager">06 - git credential manager</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget <span class="nt">--no-check-certificate</span> <span class="nt">--content-disposition</span> <span class="nt">-O</span> - https://raw.githubusercontent.com/castorfou/guillaume_blog/master/files/setup_wsl_06_git_credential_manager.sh | bash
</code></pre></div></div>

<h3 id="07---install-wslu">07 - install wslu</h3>

<p><a href="https://wslutiliti.es/wslu/">wslu</a></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget <span class="nt">--no-check-certificate</span> <span class="nt">--content-disposition</span> <span class="nt">-O</span> - https://raw.githubusercontent.com/castorfou/guillaume_blog/master/files/setup_wsl_07_wslu.sh | bash
</code></pre></div></div>

<p>Some examples:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>wslfetch

               .-/+oossssoo+/-.               Windows Subsystem <span class="k">for </span>Linux <span class="o">(</span>WSL2<span class="o">)</span>
           <span class="sb">`</span>:+ssssssssssssssssss+:<span class="sb">`</span>           guillaume@LL11LPC0PQARQ
         -+ssssssssssssssssssyyssss+-         Build: 19044
       .ossssssssssssssssssdMMMNysssso.       Branch: vb_release
      /ssssssssssshdmmNNmmyNMMMMhssssss/      Release: Ubuntu 22.04 LTS
     +ssssssssshmydMMMMMMMNddddyssssssss+     Kernel: Linux 5.10.102.1-microsoft-standard-WSL2
    /sssssssshNMMMyhhyyyyhmNMMMNhssssssss/    Uptime: 0d 3h 44m
   .ssssssssdMMMNhsssssssssshNMMMdssssssss.
   +sssshhhyNMMNyssssssssssssyNMMMysssssss+
   ossyNMMMNyMMhsssssssssssssshmmmhssssssso
   ossyNMMMNyMMhsssssssssssssshmmmhssssssso
   +sssshhhyNMMNyssssssssssssyNMMMysssssss+
   .ssssssssdMMMNhsssssssssshNMMMdssssssss.
    /sssssssshNMMMyhhyyyyhdNMMMNhssssssss/
     +sssssssssdmydMMMMMMMMddddyssssssss+
      /ssssssssssshdmNNNNmyNMMMMhssssss/
       .ossssssssssssssssssdMMMNysssso.
         -+sssssssssssssssssyyyssss+-
           <span class="sb">`</span>:+ssssssssssssssssss+:<span class="sb">`</span>
               .-/+oossssoo+/-.
               
<span class="nv">$ </span>wslpath <span class="nt">-u</span> <span class="s2">"C:</span><span class="se">\P</span><span class="s2">rogram Files</span><span class="se">\T</span><span class="s2">ypora</span><span class="se">\T</span><span class="s2">ypora.exe"</span>
/mnt/c/Program Files/Typora/Typora.exe
</code></pre></div></div>

<h3 id="08---configure-pip">08 - configure pip</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget <span class="nt">--no-check-certificate</span> <span class="nt">--content-disposition</span> <span class="nt">-O</span> - https://raw.githubusercontent.com/castorfou/guillaume_blog/master/files/setup_wsl_08_pip.sh | bash
</code></pre></div></div>

<h3 id="09---install-vscode">09 - install vscode</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>code <span class="nb">.</span>
</code></pre></div></div>

<p>(given <a href="https://code.visualstudio.com/">Visual Studio Code is installed on the <strong>Windows</strong> side (not in WSL)</a>)</p>

<p>(and if needed install <a href="https://aka.ms/vscode-remote/download/extension">Remote development</a>)</p>

<h2 id="manual-setup-skip-if-to-follow-automatic-setup">Manual setup (skip if to follow automatic setup)</h2>

<h3 id="basic-setup">basic setup</h3>

<p>With this way to install, you don’t have any user, you don’t have any launcher within Windows.</p>

<p>Create a user and add it to sudo:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># adduser &lt;yourusername&gt;</span>
<span class="c"># usermod -aG sudo &lt;yourusername&gt;</span>
adduser guillaume
usermod <span class="nt">-aG</span> <span class="nb">sudo </span>guillaume
</code></pre></div></div>

<p>and I can switch to this user simply with</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># su &lt;yourusername&gt;</span>
su guillaume
</code></pre></div></div>

<h3 id="launch-distro-with-yourusername---update-wslconf">launch distro with yourusername - update <code class="language-plaintext highlighter-rouge">wsl.conf</code></h3>

<p>Manually you can now start your distro with your username from powershell</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># wsl -d &lt;distroname&gt; -u &lt;yourusername&gt;</span><span class="w">
</span><span class="n">wsl</span><span class="w"> </span><span class="nt">-d</span><span class="w"> </span><span class="nx">ubuntu-22.04</span><span class="w"> </span><span class="nt">-u</span><span class="w"> </span><span class="nx">guillaume</span><span class="w">
</span></code></pre></div></div>

<p>Or from another wsl (huge avantage to run in linux terminal instead of powershell)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wsl.exe <span class="nt">-d</span> ubuntu-22.04 <span class="nt">-u</span> guillaume
</code></pre></div></div>

<p>but you can better keep this username setting by updating <code class="language-plaintext highlighter-rouge">wsl.conf</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># /etc/wsl.conf</span>
<span class="c"># Set the user when launching a distribution with WSL.</span>
<span class="o">[</span>user]
<span class="nv">default</span><span class="o">=</span>YourUserName
</code></pre></div></div>

<p>It is now setup. You can now shutdown this instance from powershell.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># wsl --shutdown &lt;distroname&gt;</span><span class="w">
</span><span class="n">wsl</span><span class="w"> </span><span class="nt">--shutdown</span><span class="w"> </span><span class="nx">ubuntu-22.04</span><span class="w">
</span></code></pre></div></div>

<p>and when starting <code class="language-plaintext highlighter-rouge">wsl -d ubuntu-22.04</code>, you reach your username.</p>

<h3 id="wsl-vpnkit">wsl-vpnkit</h3>

<p>As wsl-vpnkit is already installed, I just have to</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s1">'wsl.exe -d wsl-vpnkit service wsl-vpnkit start'</span> <span class="o">&gt;&gt;</span> ~/.profile
<span class="nb">source</span> .bashrc
</code></pre></div></div>

<h3 id="gitlab">gitlab</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-t</span> rsa <span class="nt">-b</span> 4096 <span class="nt">-C</span> <span class="s2">"WSL2 ubuntu 22.04"</span>
</code></pre></div></div>

<p>and copy <code class="language-plaintext highlighter-rouge">id_rsa.pub</code> into gitlab &gt; preferences &gt; SSH Keys</p>

<h3 id="corporate-ca-certificates">corporate CA certificates</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone git@gitlab.michelin.com:devops-foundation/devops_environment.git /tmp/devops_environment
<span class="nb">sudo cp</span> /tmp/devops_environment/certs/<span class="k">*</span> /usr/local/share/ca-certificates/
<span class="nb">sudo </span>update-ca-certificates
<span class="nb">rm</span> <span class="nt">-rf</span> /tmp/devops_environment
</code></pre></div></div>

<h3 id="apt-sources">apt sources</h3>

<p>had to replace focal (20.04) to jammy (22.04)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s1">'Acquire { http::User-Agent "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:13.37) Gecko/20100101 Firefox/31.33.7"; };'</span> | <span class="nb">sudo tee</span> /etc/apt/apt.conf.d/90globalprotectconf
<span class="nb">sudo sed</span> <span class="nt">-i</span> <span class="s1">'s@^\(deb \)http://archive.ubuntu.com/ubuntu/\( jammy\(-updates\)\?.*\)$@\1https://artifactory.michelin.com/artifactory/ubuntu-archive-remote\2\n# &amp;@'</span> /etc/apt/sources.list
<span class="nb">sudo sed</span> <span class="nt">-i</span> <span class="s1">'s@^\(deb \)http://security.ubuntu.com/ubuntu/\( jammy\(-updates\)\?.*\)$@\1https://artifactory.michelin.com/artifactory/ubuntu-security-remote\2\n# &amp;@'</span> /etc/apt/sources.list
</code></pre></div></div>

<h3 id="check-everything-is-ok">check everything is ok</h3>

<ul>
  <li>This command must return google ip:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  host google.fr
</code></pre></div></div>

<ul>
  <li>This command must return artifactory ip:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  host artifactory.michelin.com
</code></pre></div></div>

<ul>
  <li>You are able to update your distribution without error:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>apt update
  <span class="nb">sudo </span>apt upgrade <span class="nt">-y</span>
</code></pre></div></div>

<h3 id="setup-config-dotfiles-with-whole-filesystem-">Setup config dotfiles with whole filesystem (/)</h3>

<p>as detailed in <a href="https://castorfou.github.io/guillaume_blog/blog/keep-dotfiles-in-git.html">keep dotfiles in git</a></p>

<p>but to manage the whole filesystem.</p>

<h4 id="init-local-repo">init local repo</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo mkdir</span> <span class="nt">-p</span> /.cfg
<span class="nb">sudo chown</span> <span class="nv">$USER</span>:users /.cfg
git init <span class="nt">--bare</span> /.cfg
<span class="nb">alias </span><span class="nv">config</span><span class="o">=</span><span class="s1">'/usr/bin/git --git-dir=/.cfg/ --work-tree=/'</span>
config config <span class="nt">--local</span> status.showUntrackedFiles no
<span class="nb">echo</span> <span class="s2">"alias config='/usr/bin/git --git-dir=/.cfg/ --work-tree=/'"</span> <span class="o">&gt;&gt;</span> <span class="nv">$HOME</span>/.bash_aliases
<span class="nb">cd
source</span> .bashrc
</code></pre></div></div>

<h4 id="git-default-identity-if-needed">git default identity (if needed)</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>config config <span class="nt">--global</span> user.email <span class="s2">"guillaume.ramelet@michelin.com"</span>
config config <span class="nt">--global</span> user.name <span class="s2">"guillaume"</span>
</code></pre></div></div>

<h4 id="setup-branch-and-push-to-central-repo">setup branch and push to central repo</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>config remote add origin git@gitlab.michelin.com:janus/dotfiles.git
config fetch
<span class="nb">cd
</span>config add .bashrc
config commit <span class="nt">-m</span> <span class="s1">'init with .bashrc'</span>

config branch GR_WSL2_ubuntu22.04
config checkout GR_WSL2_ubuntu22.04
config push <span class="nt">--set-upstream</span> origin GR_WSL2_ubuntu22.04
</code></pre></div></div>]]></content><author><name></name></author><category term="wsl" /><summary type="html"><![CDATA[even if not available in Windows Store]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://castorfou.github.io/guillaume_blog/images/icons/wsl2.jpeg" /><media:content medium="image" url="https://castorfou.github.io/guillaume_blog/images/icons/wsl2.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>