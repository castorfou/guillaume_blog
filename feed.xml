<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://castorfou.github.io/guillaume_blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://castorfou.github.io/guillaume_blog/" rel="alternate" type="text/html" /><updated>2022-07-01T02:43:24-05:00</updated><id>https://castorfou.github.io/guillaume_blog/feed.xml</id><title type="html">Guillaume’s blog</title><subtitle>Journey for a datascientist</subtitle><entry><title type="html">Logbook for July 22</title><link href="https://castorfou.github.io/guillaume_blog/blog/logbook-July-22.html" rel="alternate" type="text/html" title="Logbook for July 22" /><published>2022-07-01T00:00:00-05:00</published><updated>2022-07-01T00:00:00-05:00</updated><id>https://castorfou.github.io/guillaume_blog/blog/logbook-July-22</id><content type="html" xml:base="https://castorfou.github.io/guillaume_blog/blog/logbook-July-22.html"><![CDATA[<h2 id="week-26---july-22">Week 26 - July 22</h2>

<p><strong>Friday 7/1</strong></p>

<ul>
  <li>continue <a href="/guillaume_blog/blog/deep-rl-class-with-huggingface.html">deep rl class</a> with unit 4, unity ml agents within huggingface. And there is a link to a page explaining <a href="https://huggingface.co/blog/decision-transformers">decision transformers</a>. Seems quite powerful and could be useful for me.</li>
</ul>]]></content><author><name></name></author><category term="logbook" /><summary type="html"><![CDATA[Week 26 - July 22]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://castorfou.github.io/guillaume_blog/images/logbook.jpg" /><media:content medium="image" url="https://castorfou.github.io/guillaume_blog/images/logbook.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Deep RL class - huggingface</title><link href="https://castorfou.github.io/guillaume_blog/blog/deep-rl-class-with-huggingface.html" rel="alternate" type="text/html" title="Deep RL class - huggingface" /><published>2022-06-15T00:00:00-05:00</published><updated>2022-06-15T00:00:00-05:00</updated><id>https://castorfou.github.io/guillaume_blog/blog/deep-rl-class-with-huggingface</id><content type="html" xml:base="https://castorfou.github.io/guillaume_blog/blog/deep-rl-class-with-huggingface.html"><![CDATA[<p>Didn’t mention that but I have started <a href="https://github.com/huggingface/deep-rl-class">The Hugging Face Deep Reinforcement Learning Class</a> by Thomas Simonini.</p>

<p>Thomas is now part of HuggingFace.</p>

<p>1st step is to fork the repo, and for mine it is <a href="https://github.com/castorfou/deep-rl-class">here</a>.</p>

<p>And clone it locally: <code class="language-plaintext highlighter-rouge">git clone git@github.com:castorfou/deep-rl-class.git</code></p>

<p>I followed the 1st unit in May/11.</p>

<p>there is a community on discord at <a href="https://discord.gg/aYka4Yhff9">https://discord.gg/aYka4Yhff9</a>, with a lounge about RL.</p>

<h1 id="unit-1---introduction-to-deep-reinforcement-learning"><a href="https://github.com/huggingface/deep-rl-class/tree/main/unit1">Unit 1</a> - Introduction to Deep Reinforcement Learning</h1>

<ul>
  <li>It starts with some <a href="https://huggingface.co/blog/deep-rl-intro">general introduction to deep RL</a> and then a quizz.</li>
  <li>1st practice uses this lunar lander environment, and you train a PPO agent to get the highest score,</li>
  <li>and this runs on colab : <a href="https://github.com/huggingface/deep-rl-class/blob/main/unit1/unit1.ipynb">https://github.com/huggingface/deep-rl-class/blob/main/unit1/unit1.ipynb</a> (just by clicking on <img src="https://camo.githubusercontent.com/84f0493939e0c4de4e6dbe113251b4bfb5353e57134ffd9fcab6b8714514d4d1/68747470733a2f2f636f6c61622e72657365617263682e676f6f676c652e636f6d2f6173736574732f636f6c61622d62616467652e737667" alt="https://camo.githubusercontent.com/84f0493939e0c4de4e6dbe113251b4bfb5353e57134ffd9fcab6b8714514d4d1/68747470733a2f2f636f6c61622e72657365617263682e676f6f676c652e636f6d2f6173736574732f636f6c61622d62616467652e737667" />)</li>
  <li>there is a leaderboard running under huggingface (one can publish models to huggingface) <a href="https://huggingface.co/spaces/chrisjay/Deep-Reinforcement-Learning-Leaderboard">https://huggingface.co/spaces/chrisjay/Deep-Reinforcement-Learning-Leaderboard</a> . Just need an huggingface account for that (used my Michelin account)</li>
</ul>

<p>A guide has been recently added explaining how to tune hyperparameters using optuna. 👉 <a href="https://github.com/huggingface/deep-rl-class/blob/main/unit1/unit1_optuna_guide.ipynb">https://github.com/huggingface/deep-rl-class/blob/main/unit1/unit1_optuna_guide.ipynb</a>. Should do it!</p>

<p>To start unit2. Introduction to Q-Learning</p>

<ul>
  <li>first update from fork just by clicking<img src="https://docs.github.com/assets/cb-33131/images/help/repository/fetch-upstream-drop-down.png" alt="&quot;Fetch upstream&quot; drop-down" style="zoom:15%;" /></li>
  <li>and update your local repo (<code class="language-plaintext highlighter-rouge">git fetch</code> <code class="language-plaintext highlighter-rouge">git pull</code>)</li>
</ul>

<h1 id="unit-2---introduction-to-q-learning"><a href="https://github.com/huggingface/deep-rl-class/tree/main/unit2">Unit 2</a> - Introduction to Q-Learning</h1>

<ul>
  <li><a href="https://huggingface.co/blog/deep-rl-q-part1">part 1</a> - we learned about the value-based methods and the difference between Monte Carlo and Temporal Difference Learning. Then a quizz (easy one)</li>
  <li><a href="https://huggingface.co/blog/deep-rl-q-part2">part 2</a> - and then Q-learning which is an <strong>off-policy value-based method that uses a TD approach to train its action-value function</strong>. Then a quizz (less easier)</li>
  <li>and <a href="https://colab.research.google.com/github/huggingface/deep-rl-class/blob/main/unit2/unit2.ipynb">hands-on</a>. 1st algo (FrozenLake) is published in <a href="https://huggingface.co/Guillaume63/q-FrozenLake-v1-4x4-noSlippery">Guillaume63/q-FrozenLake-v1-4x4-noSlippery</a>. 2nd algo (Taxi) is published in <a href="https://huggingface.co/Guillaume63/q-Taxi-v3">Guillaume63/q-Taxi-v3</a>. Leaderboard is <a href="https://huggingface.co/spaces/chrisjay/Deep-Reinforcement-Learning-Leaderboard">here</a></li>
</ul>

<h1 id="unit-3---deep-q-learning-with-atari-games"><a href="https://github.com/huggingface/deep-rl-class/tree/main/unit3">Unit 3</a> - Deep Q-Learning with Atari Games</h1>

<ul>
  <li>The Deep Q-Learning chapter 👾 👉  <a href="https://huggingface.co/blog/deep-rl-dqn">https://huggingface.co/blog/deep-rl-dqn</a></li>
  <li>Start the tutorial here 👉 <a href="https://colab.research.google.com/github/huggingface/deep-rl-class/blob/main/unit3/unit3.ipynb">https://colab.research.google.com/github/huggingface/deep-rl-class/blob/main/unit3/unit3.ipynb</a></li>
</ul>

<p>from discord, a video (30’) by Antonin Raffin about <a href="https://www.youtube.com/watch?v=AidFTOdGNFQ">Automatic Hyperparameter Optimization @ ICRA 22 - Tools for Robotic RL 6/8</a>. Never thought about it that way, it can help to speed training phase.</p>

<p>from discord as well a video to build a <a href="https://www.youtube.com/watch?v=eBCU-tqLGfQ">doom ai model</a> (3 hours!)</p>

<p>and from discord a lecture from Pieter Abbeel explaining Q-value to DQN and why we have this double network at <a href="https://www.youtube.com/watch?v=Psrhxy88zww">L2 Deep Q-Learning (Foundations of Deep RL Series</a>. This is part of a larger lecture available at <a href="https://www.youtube.com/watch?v=2GwBez0D20A&amp;list=PLwRJQ4m4UJjNymuBM9RdmB3Z9N5-0IlY0">Foundations of Deep RL – 6-lecture series by Pieter Abbeel</a></p>

<p>And then a video explaining <a href="https://agarwl.github.io/rliable/">Deep RL at the Edge of the Statistical Precipice</a>. This was from a paper at Neurips.</p>

<h1 id="unit-4---an-introduction-to-unity-ml-agents-with-hugging-face-"><a href="https://thomassimonini.medium.com/an-introduction-to-unity-ml-agents-with-hugging-face-efbac62c8c80">Unit 4</a> - An Introduction to <strong>Unity ML-Agents with Hugging Face 🤗</strong></h1>

<p>(no post in github for this one) Thomas starts with evolutions on RL domain, citing <a href="https://huggingface.co/blog/decision-transformers">Decision Transformers</a> as one of the last hot topic. And then introduces Unity and how it can now be used with RL agents.</p>

<p><img src="https://miro.medium.com/max/1400/0*kYixBHKWwmY65Mg_" alt="unity ML-Agents toolkit" /></p>

<p>Interesting idea to introduce <a href="https://medium.com/data-from-the-trenches/curiosity-driven-learning-through-next-state-prediction-f7f4e2f592fa">curiosity</a> and to make it real as an intrinsic reward. It guided me to gentle introductions to <a href="https://machinelearningmastery.com/cross-entropy-for-machine-learning/">cross-entropy for machine learning</a> and <a href="https://machinelearningmastery.com/what-is-information-entropy/">information entropy</a>.</p>

<ul>
  <li><strong>Low Probability Event</strong> (<em>surprising</em>): More information. High entropy.</li>
  <li><strong>Higher Probability Event</strong> (<em>unsurprising</em>): Less information. Low entropy.</li>
  <li><strong>Skewed Probability Distribution</strong> (<em>unsurprising</em>): Low entropy.</li>
  <li><strong>Balanced Probability Distribution</strong> (<em>surprising</em>): High entropy.</li>
</ul>

<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>I</mi><mi>n</mi><mi>f</mi><mi>o</mi><mi>r</mi><mi>m</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>:</mo><mspace linebreak="newline"></mspace><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>P</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Information:

\\h(x)=-\log(P(x))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal">ma</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">))</span></span></span></span></span>

<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mi>n</mi><mi>t</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>y</mi><mo>:</mo><mspace linebreak="newline"></mspace><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mtext>–</mtext><munder><mo>∑</mo><mrow><mi>x</mi><mo>∈</mo><mi>X</mi></mrow></munder><mi>P</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>P</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Entropy:
\\H(X) = – \sum_{x \in X} P(x)  \log(P(x))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal">ro</span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3717em;vertical-align:-1.3217em;"></span><span class="mord">–</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.8557em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3217em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">))</span></span></span></span></span>]]></content><author><name></name></author><category term="reinforcement learning" /><category term="huggingface" /><summary type="html"><![CDATA[par Thomas Simonini]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://castorfou.github.io/guillaume_blog/images/RL.png" /><media:content medium="image" url="https://castorfou.github.io/guillaume_blog/images/RL.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Logbook for June 22</title><link href="https://castorfou.github.io/guillaume_blog/blog/logbook-June-22.html" rel="alternate" type="text/html" title="Logbook for June 22" /><published>2022-06-01T00:00:00-05:00</published><updated>2022-06-01T00:00:00-05:00</updated><id>https://castorfou.github.io/guillaume_blog/blog/logbook-June-22</id><content type="html" xml:base="https://castorfou.github.io/guillaume_blog/blog/logbook-June-22.html"><![CDATA[<h2 id="week-24---june-22">Week 24 - June 22</h2>

<p><strong>Wednesday 6/15</strong></p>

<ul>
  <li>continue <a href="/guillaume_blog/blog/deep-rl-class-with-huggingface.html">deep rl class</a> with unit 2, interesting notebook to learn about using optuna to tune hyperparameters</li>
</ul>

<p><strong>Friday 6/17</strong></p>

<ul>
  <li>Sylvain pointed me to a paper from X: <a href="https://arxiv.org/abs/2206.06841">Robust Reinforcement Learning with Distributional Risk-averse formulation</a> now in <a href="https://www.zotero.org/guillaumeramelet/collections/P7DX6A6B/items/EB3XCB4Z/collection">zotero</a> to use distribution information to strengthen RL epxloration. To be read and tested</li>
</ul>]]></content><author><name></name></author><category term="logbook" /><summary type="html"><![CDATA[Week 24 - June 22]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://castorfou.github.io/guillaume_blog/images/logbook.jpg" /><media:content medium="image" url="https://castorfou.github.io/guillaume_blog/images/logbook.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">save git https credentials under wsl</title><link href="https://castorfou.github.io/guillaume_blog/blog/save-git-https-credentials-under-wsl.html" rel="alternate" type="text/html" title="save git https credentials under wsl" /><published>2022-05-03T00:00:00-05:00</published><updated>2022-05-03T00:00:00-05:00</updated><id>https://castorfou.github.io/guillaume_blog/blog/save%20git%20https%20credentials%20under%20wsl</id><content type="html" xml:base="https://castorfou.github.io/guillaume_blog/blog/save-git-https-credentials-under-wsl.html"><![CDATA[<h2 id="source-of-inspiration">source of inspiration</h2>

<p>Microsoft has released a tool to securely keep https credentials:</p>

<p><a href="https://github.com/GitCredentialManager/git-credential-manager">git-credential-manager</a></p>

<p>Usefull when one has to use https instead of git(ssl) to connect to git repos. My case when I am behing my corporate firewall and has to link to github repos (such as this blog)</p>

<h2 id="how-to-setup-it">How to setup it</h2>

<h4 id="create-token-in-github">create token in github</h4>

<p>I have to create a token at Settings &gt; Developer Settings &gt; Personal Access Tokens</p>

<h4 id="installation-of-git-credential-manager-inside-wsl">installation of git-credential-manager inside WSL</h4>

<p>Download the latest (v2.0.696 at May/3rd 2022) <a href="https://github.com/GitCredentialManager/git-credential-manager/releases/latest">.deb package</a>, and run the following:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>dpkg <span class="nt">-i</span> &lt;path-to-package&gt;
git-credential-manager-core configure
git config <span class="nt">--global</span> credential.credentialStore gpg
<span class="nb">export </span><span class="nv">GPG_TTY</span><span class="o">=</span><span class="si">$(</span><span class="nb">tty</span><span class="si">)</span>
gpg <span class="nt">--full-generate-key</span>
<span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> pass
<span class="nv">key_id</span><span class="o">=</span><span class="sb">`</span>gpg <span class="nt">--list-keys</span> | <span class="nb">awk</span> <span class="nt">-F</span>: <span class="s1">'/^ / { print $0 }'</span> | <span class="nb">cut</span> <span class="nt">-d</span><span class="s2">" "</span> <span class="nt">-f7</span><span class="sb">`</span>
pass init <span class="nv">$key_id</span>
</code></pre></div></div>

<p>or see the step 06 in <a href="https://castorfou.github.io/guillaume_blog/blog/install-ubuntu-22.04-on-WSL.html">install ubuntu 22.04 on WSL</a></p>]]></content><author><name></name></author><category term="git" /><summary type="html"><![CDATA[git-credential-manager]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://castorfou.github.io/guillaume_blog/images/git.png" /><media:content medium="image" url="https://castorfou.github.io/guillaume_blog/images/git.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">upgrade to last version of fastpages</title><link href="https://castorfou.github.io/guillaume_blog/blog/upgrade-fastpages.html" rel="alternate" type="text/html" title="upgrade to last version of fastpages" /><published>2022-05-02T00:00:00-05:00</published><updated>2022-05-02T00:00:00-05:00</updated><id>https://castorfou.github.io/guillaume_blog/blog/upgrade-fastpages</id><content type="html" xml:base="https://castorfou.github.io/guillaume_blog/blog/upgrade-fastpages.html"><![CDATA[<h2 id="source-of-inspiration">source of inspiration</h2>

<p>as detailed in <a href="https://github.com/fastai/fastpages/issues/634">https://github.com/fastai/fastpages/issues/634</a></p>

<p>Hamel asks to restart from a new repo. But how to keep the same blog url?</p>

<p>Easy way is to rename former repo (from <code class="language-plaintext highlighter-rouge">guillaume_blog</code> to <code class="language-plaintext highlighter-rouge">guillaume_blog_old</code>) and initiate new repo as former one (<code class="language-plaintext highlighter-rouge">guillaume_blog</code>).</p>

<p>Here are the steps.</p>

<h2 id="installation-and-setup">Installation and setup</h2>

<h3 id="installation">Installation</h3>

<ol>
  <li>Generate a copy of <a href="https://github.com/fastai/fastpages#setup-instructions">fastpages repo</a>. Just have to follow instructions by clicking at https://github.com/fastai/fastpages/generate. Name repo as <code class="language-plaintext highlighter-rouge">guillaume_blog</code></li>
  <li>Click on the PR <code class="language-plaintext highlighter-rouge">Initial Setup</code> in your new repo. There are instructions to create a SSH_DEPLOY_KEY.</li>
  <li>Merge this PR</li>
  <li>Clone this repo locally</li>
  <li>Because I use https, I have to create a token at Settings &gt; Developer Settings &gt; Personal Access Tokens</li>
  <li>and to keep this token locally, I enter <code class="language-plaintext highlighter-rouge">git config --global credential.helper manager</code> before pushing</li>
</ol>

<h3 id="copy-content">Copy content</h3>

<ol>
  <li>Directories: <code class="language-plaintext highlighter-rouge">_notebooks</code>, <code class="language-plaintext highlighter-rouge">_posts</code>, <code class="language-plaintext highlighter-rouge">_files</code>, <code class="language-plaintext highlighter-rouge">_images</code></li>
  <li>Clean content from directories (examples) in  <code class="language-plaintext highlighter-rouge">_notebooks</code>, <code class="language-plaintext highlighter-rouge">_posts</code>, <code class="language-plaintext highlighter-rouge">_words</code></li>
  <li>Pages: <code class="language-plaintext highlighter-rouge">_pages/about.md</code>, <code class="language-plaintext highlighter-rouge">index.html</code>, <code class="language-plaintext highlighter-rouge">README.md</code></li>
  <li>and utils: <code class="language-plaintext highlighter-rouge">refresh_blog_content.sh</code>, <code class="language-plaintext highlighter-rouge">publish.sh</code></li>
</ol>]]></content><author><name></name></author><category term="fastpages" /><summary type="html"><![CDATA[following bug with pyYaml]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://castorfou.github.io/guillaume_blog/images/icons/fastai.png" /><media:content medium="image" url="https://castorfou.github.io/guillaume_blog/images/icons/fastai.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">install ubuntu 22.04 on WSL</title><link href="https://castorfou.github.io/guillaume_blog/blog/install-ubuntu-22.04-on-WSL.html" rel="alternate" type="text/html" title="install ubuntu 22.04 on WSL" /><published>2022-04-25T00:00:00-05:00</published><updated>2022-04-25T00:00:00-05:00</updated><id>https://castorfou.github.io/guillaume_blog/blog/install%20ubuntu%2022.04%20on%20WSL</id><content type="html" xml:base="https://castorfou.github.io/guillaume_blog/blog/install-ubuntu-22.04-on-WSL.html"><![CDATA[<h2 id="source-of-inspiration">source of inspiration</h2>

<p><a href="https://www.windowscentral.com/how-install-ubuntu-2110-wsl-windows-10-and-11">How to install Ubuntu 21.10 on WSL for Windows 10 and 11</a></p>

<h2 id="installation">Installation</h2>

<h3 id="uninstall-image-if-needed">uninstall image (if needed)</h3>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># wsl --unregister &lt;distroName&gt;</span><span class="w">
</span><span class="n">wsl</span><span class="w"> </span><span class="nt">--unregister</span><span class="w"> </span><span class="nx">ubuntu-22.04</span><span class="w">
</span></code></pre></div></div>

<h3 id="download-images">download images</h3>

<p>From <a href="https://cloud-images.ubuntu.com/jammy/current/">cloud images ubuntu</a> (cloud-images &gt; jammy &gt; current), now there are wsl images:</p>

<p><img src="https://www.windowscentral.com/sites/wpcentral.com/files/styles/larger/public/field/image/2022/01/ubuntu-cloud-images-website.png" alt="ubuntu cloud images" /></p>

<p>I just have to download the last jammy (22.04) image <code class="language-plaintext highlighter-rouge">jammy-server-cloudimg-amd64-wsl.rootfs.tar.gz</code></p>

<h3 id="install-and-setup-from-powershell">install and setup from powershell</h3>

<p>I have downloaded this ubuntu image to <code class="language-plaintext highlighter-rouge">D:\wsl\ubuntu-22.04\download</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>base<span class="o">)</span> guillaume@LL11LPC0PQARQ:/mnt/d/wsl<span class="nv">$ </span>tree
<span class="nb">.</span>
├── Ubuntu-20.04
│   └── ext4.vhdx
├── Ubuntu-22.04
│   ├── download
│   │   └── jammy-server-cloudimg-amd64-wsl.rootfs.tar.gz
│   └── instance
</code></pre></div></div>

<p>and my <code class="language-plaintext highlighter-rouge">ubuntu-22.04</code> instance will stand in <code class="language-plaintext highlighter-rouge">D:\wsl\ubuntu-22.04\instance</code></p>

<p>Install with this command from powershell</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># wsl --import &lt;distroname&gt; &lt;location of instance&gt; &lt;location of download&gt;</span><span class="w">
</span><span class="n">wsl</span><span class="w"> </span><span class="nt">--import</span><span class="w"> </span><span class="nx">ubuntu-22.04</span><span class="w"> </span><span class="nx">D:\wsl\ubuntu-22.04\instance</span><span class="w"> </span><span class="nx">D:\wsl\ubuntu-22.04\download\jammy-server-cloudimg-amd64-wsl.rootfs.tar.gz</span><span class="w">
</span></code></pre></div></div>

<p>It takes 3-4 minutes to install. and should be visible in your wsl instances.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w"> </span><span class="n">wsl</span><span class="w"> </span><span class="nt">--list</span><span class="w"> </span><span class="nt">--all</span><span class="w"> </span><span class="nt">-v</span><span class="w">
  </span><span class="n">NAME</span><span class="w">            </span><span class="nx">STATE</span><span class="w">           </span><span class="nx">VERSION</span><span class="w">
  </span><span class="n">ubuntu-22.04</span><span class="w">    </span><span class="nx">Stopped</span><span class="w">         </span><span class="nx">2</span><span class="w">
</span></code></pre></div></div>

<p>then to run it</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># wsl -d &lt;distroname&gt;</span><span class="w">
</span><span class="n">wsl</span><span class="w"> </span><span class="nt">-d</span><span class="w"> </span><span class="nx">ubuntu-22.04</span><span class="w">
</span></code></pre></div></div>

<p>or</p>

<h4 id="use-windows-terminal-as-a-launcher">use Windows Terminal as a launcher</h4>

<p>Windows Terminal is a smart way to group all terminals (powershell, and all your wsl instances)</p>

<p><img src="../images/windows_terminal.jpg" alt="windows terminal" /></p>

<p>It can be installed even with limited windows store access by clicking install in <a href="https://docs.microsoft.com/fr-fr/windows/terminal/install">Installer le Terminal Windows et commencer à le configurer</a></p>

<p>Automatically all wsl instances appear in Settings.</p>

<h2 id="automatic-setup">Automatic setup</h2>

<p>copy these 2 <a href="https://github.com/castorfou/guillaume_blog/tree/master/files">scripts</a> in /root/ (given they are in <code class="language-plaintext highlighter-rouge">D:\wsl\ubuntu-22.04\download</code>)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cp</span> /mnt/d/wsl/Ubuntu-22.04/download/setup_wsl_<span class="k">*</span> <span class="nb">.</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">setup_wsl_root.sh</code> <a href="../files/setup_wsl_root.sh">download</a></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="nb">echo</span> <span class="s2">"0. get username: "</span>
<span class="nb">read </span>user_name

<span class="nb">.</span> /etc/lsb-release

<span class="nb">echo </span>Configuration <span class="k">for </span>user <span class="o">[</span><span class="nv">$user_name</span><span class="o">]</span>
<span class="nb">echo </span>of distribution <span class="nv">$DISTRIB_CODENAME</span>
<span class="nb">echo

echo</span> <span class="s2">"1. create user and add in sudo"</span>
<span class="c">#adduser --disabled-password --gecos "" $user_name</span>
adduser <span class="nt">--gecos</span> <span class="s2">""</span> <span class="nv">$user_name</span>
usermod <span class="nt">-aG</span> <span class="nb">sudo</span> <span class="nv">$user_name</span>
<span class="nb">echo

echo</span> <span class="s2">"2. create wsl.conf file"</span>
<span class="nb">rm</span> <span class="nt">-rf</span> /etc/wsl.conf
<span class="nb">tee</span> /etc/wsl.conf <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
# Set the user when launching a distribution with WSL.
[user]
default=</span><span class="nv">$user_name</span><span class="sh">
</span><span class="no">EOF
</span><span class="nb">echo

echo</span> <span class="s2">"3. prepare setup by user"</span>
<span class="nb">cp </span>setup_wsl_user.sh /home/<span class="nv">$user_name</span>
<span class="nb">chown</span> <span class="nv">$user_name</span>:users /home/<span class="nv">$user_name</span>/setup_wsl_user.sh
<span class="nb">chmod </span>750  /home/<span class="nv">$user_name</span>/setup_wsl_user.sh
<span class="nb">tee</span> <span class="nt">-a</span> /home/<span class="nv">$user_name</span>/.bashrc <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
if [ ! -e ".wsl_configured" ]; then
		./setup_wsl_user.sh
        touch .wsl_configured
fi
</span><span class="no">EOF
</span><span class="nb">echo

echo</span> <span class="s2">"end of configuration for root"</span>
<span class="nb">echo</span> <span class="s2">"stop wsl instance by running 'wsl --shutdown &lt;distroname&gt;' from powershell"</span>
<span class="nb">echo</span> <span class="s2">"and start from Windows Terminal"</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">setup_wsl_user.sh</code> <a href="../files/setup_wsl_user.sh">download</a></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="nb">echo</span> <span class="s2">"1. setup wsl-vpnkit"</span>
<span class="k">if </span><span class="nb">grep</span> <span class="nt">-Fxq</span> <span class="s2">"wsl-vpnkit"</span> ~/.profile
<span class="k">then</span>
    <span class="c"># code if found</span>
	<span class="nb">echo</span> <span class="s2">"   wsl-vpnkit already setup"</span>
<span class="k">else</span>
    <span class="c"># code if not found</span>
	<span class="nb">echo</span> <span class="s1">'wsl.exe -d wsl-vpnkit service wsl-vpnkit start'</span> <span class="o">&gt;&gt;</span> ~/.profile
<span class="k">fi
</span>wsl.exe <span class="nt">-d</span> wsl-vpnkit service wsl-vpnkit start
<span class="nb">source</span> ./.bashrc
<span class="nb">echo

echo</span> <span class="s2">"2. create ssh key to copy to gitlab"</span>
<span class="nb">.</span> /etc/lsb-release
<span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-e</span> <span class="s2">".ssh/id_rsa.pub"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
		</span>ssh-keygen <span class="nt">-t</span> rsa <span class="nt">-b</span> 4096 <span class="nt">-C</span> <span class="s2">"WSL2 ubuntu </span><span class="nv">$DISTRIB_RELEASE</span><span class="s2">"</span>
		<span class="nb">cat</span> .ssh/id_rsa.pub
		<span class="nb">echo</span> <span class="s2">"copy this content to gitlab &gt; preferences &gt; SSH Keys"</span>
		<span class="nb">read</span> <span class="nt">-p</span> <span class="s2">"Press any key to resume ..."</span>
<span class="k">fi
</span><span class="nb">echo

echo</span> <span class="s2">"3. update certificates"</span>
git clone git@gitlab.michelin.com:devops-foundation/devops_environment.git /tmp/devops_environment
<span class="nb">sudo cp</span> /tmp/devops_environment/certs/<span class="k">*</span> /usr/local/share/ca-certificates/
<span class="nb">sudo </span>update-ca-certificates
<span class="nb">rm</span> <span class="nt">-rf</span> /tmp/devops_environment
<span class="k">if</span> <span class="o">[</span> <span class="nv">$DISTRIB_RELEASE</span> <span class="o">==</span> <span class="s2">"22.04"</span> <span class="o">]</span>
<span class="k">then
</span><span class="nb">echo</span> <span class="s1">'bug SSL with ubuntu 22.04 - https://bugs.launchpad.net/ubuntu/+source/openssl/+bug/1963834/comments/7'</span>
<span class="nb">sudo tee</span> <span class="nt">-a</span> /etc/ssl/openssl.cnf <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
[openssl_init]
ssl_conf = ssl_sect

[ssl_sect]
system_default = system_default_sect

[system_default_sect]
Options = UnsafeLegacyRenegotiation
</span><span class="no">EOF
</span><span class="k">fi
</span><span class="nb">echo

echo</span> <span class="s2">"4. update apt sources with artifactory"</span>
<span class="nb">echo</span> <span class="s1">'Acquire { http::User-Agent "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:13.37) Gecko/20100101 Firefox/31.33.7"; };'</span> | <span class="nb">sudo tee</span> /etc/apt/apt.conf.d/90globalprotectconf
<span class="nb">sudo sed</span> <span class="nt">-i</span> <span class="s1">'s,http://archive.ubuntu.com/ubuntu,https://artifactory.michelin.com/artifactory/ubuntu-archive-remote,g'</span> /etc/apt/sources.list
<span class="nb">sudo sed</span> <span class="nt">-i</span> <span class="s1">'s,http://security.ubuntu.com/ubuntu,https://artifactory.michelin.com/artifactory/ubuntu-archive-remote,g'</span> /etc/apt/sources.list
<span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt upgrade <span class="nt">-y</span>
<span class="nb">echo</span>
</code></pre></div></div>

<p>Then</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x setup_wsl_root.sh
./setup_wsl_root.sh
</code></pre></div></div>

<p>As explained stop wsl instance by running <code class="language-plaintext highlighter-rouge">wsl --shutdown ubuntu-22.04</code> from powershell
and start from Windows Terminal</p>

<p>It restarts from your user and it will install:</p>

<ul>
  <li>setup wsl-vpnkit</li>
  <li>create ssh key to copy to gitlab</li>
  <li>update certificates</li>
  <li>update apt sources with artifactory</li>
</ul>

<h2 id="and-now-we-can-install-other-parts">And now we can install other parts</h2>

<p>all the scripts are in <a href="https://github.com/castorfou/guillaume_blog/tree/master/files">https://github.com/castorfou/guillaume_blog/tree/master/files</a></p>

<h3 id="00---keep-config-files-in-git">00 - keep config files in git</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget <span class="nt">--no-check-certificate</span> <span class="nt">--content-disposition</span> <span class="nt">-O</span> - https://raw.githubusercontent.com/castorfou/guillaume_blog/master/files/setup_wsl_00_config_files_in_git.sh | bash
<span class="nb">source</span> .bashrc
</code></pre></div></div>

<h3 id="01---automount-secured-vbox">01 - automount secured vbox</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget <span class="nt">--no-check-certificate</span> <span class="nt">--content-disposition</span> <span class="nt">-O</span> - https://raw.githubusercontent.com/castorfou/guillaume_blog/master/files/setup_wsl_01_automount_secured_vbox.sh | bash
</code></pre></div></div>

<h3 id="02---python-with-conda-and-configure-base-environment-jupyterlab-mamba">02 - python with conda and configure base environment (jupyterlab, mamba)</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget <span class="nt">--no-check-certificate</span> <span class="nt">--content-disposition</span> <span class="nt">-O</span> - https://raw.githubusercontent.com/castorfou/guillaume_blog/master/files/setup_wsl_02_install_python_conda_part1.sh | bash
<span class="nb">cd 
source</span> .bashrc
wget <span class="nt">--no-check-certificate</span> <span class="nt">--content-disposition</span> <span class="nt">-O</span> - https://raw.githubusercontent.com/castorfou/guillaume_blog/master/files/setup_wsl_02_install_python_conda_part2.sh | bash
</code></pre></div></div>

<h3 id="03---bat-cat">03 - bat cat</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget <span class="nt">--no-check-certificate</span> <span class="nt">--content-disposition</span> <span class="nt">-O</span> - https://raw.githubusercontent.com/castorfou/guillaume_blog/master/files/setup_wsl_03_install_batcat.sh | bash
<span class="nb">source</span> .bashrc
</code></pre></div></div>

<h3 id="04---git-access">04 - git access</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ln</span> <span class="nt">-s</span> /mnt/d/git/ ~/
</code></pre></div></div>

<h3 id="05---x-access-with-gwsl">05 - X access with GWSL</h3>

<p><a href="https://opticos.github.io/gwsl/">GWSL Homepage</a></p>

<p>if you have access to <a href="https://apps.microsoft.com/store/detail/gwsl/9NL6KD1H33V3?hl=fr-fr&amp;gl=FR">Windows Store</a>, it is available.</p>

<p>Or alternate download are possible.</p>

<p><img src="..\images\GWSL_Dashboard.jpg" alt="" /></p>

<h3 id="06---git-credential-manager">06 - git credential manager</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget <span class="nt">--no-check-certificate</span> <span class="nt">--content-disposition</span> <span class="nt">-O</span> - https://raw.githubusercontent.com/castorfou/guillaume_blog/master/files/setup_wsl_06_git_credential_manager.sh | bash
</code></pre></div></div>

<h3 id="07---install-wslu">07 - install wslu</h3>

<p><a href="https://wslutiliti.es/wslu/">wslu</a></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget <span class="nt">--no-check-certificate</span> <span class="nt">--content-disposition</span> <span class="nt">-O</span> - https://raw.githubusercontent.com/castorfou/guillaume_blog/master/files/setup_wsl_07_wslu.sh | bash
</code></pre></div></div>

<p>Some examples:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>wslfetch

               .-/+oossssoo+/-.               Windows Subsystem <span class="k">for </span>Linux <span class="o">(</span>WSL2<span class="o">)</span>
           <span class="sb">`</span>:+ssssssssssssssssss+:<span class="sb">`</span>           guillaume@LL11LPC0PQARQ
         -+ssssssssssssssssssyyssss+-         Build: 19044
       .ossssssssssssssssssdMMMNysssso.       Branch: vb_release
      /ssssssssssshdmmNNmmyNMMMMhssssss/      Release: Ubuntu 22.04 LTS
     +ssssssssshmydMMMMMMMNddddyssssssss+     Kernel: Linux 5.10.102.1-microsoft-standard-WSL2
    /sssssssshNMMMyhhyyyyhmNMMMNhssssssss/    Uptime: 0d 3h 44m
   .ssssssssdMMMNhsssssssssshNMMMdssssssss.
   +sssshhhyNMMNyssssssssssssyNMMMysssssss+
   ossyNMMMNyMMhsssssssssssssshmmmhssssssso
   ossyNMMMNyMMhsssssssssssssshmmmhssssssso
   +sssshhhyNMMNyssssssssssssyNMMMysssssss+
   .ssssssssdMMMNhsssssssssshNMMMdssssssss.
    /sssssssshNMMMyhhyyyyhdNMMMNhssssssss/
     +sssssssssdmydMMMMMMMMddddyssssssss+
      /ssssssssssshdmNNNNmyNMMMMhssssss/
       .ossssssssssssssssssdMMMNysssso.
         -+sssssssssssssssssyyyssss+-
           <span class="sb">`</span>:+ssssssssssssssssss+:<span class="sb">`</span>
               .-/+oossssoo+/-.
               
<span class="nv">$ </span>wslpath <span class="nt">-u</span> <span class="s2">"C:</span><span class="se">\P</span><span class="s2">rogram Files</span><span class="se">\T</span><span class="s2">ypora</span><span class="se">\T</span><span class="s2">ypora.exe"</span>
/mnt/c/Program Files/Typora/Typora.exe
</code></pre></div></div>

<h3 id="08---configure-pip">08 - configure pip</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget <span class="nt">--no-check-certificate</span> <span class="nt">--content-disposition</span> <span class="nt">-O</span> - https://raw.githubusercontent.com/castorfou/guillaume_blog/master/files/setup_wsl_08_pip.sh | bash
</code></pre></div></div>

<h3 id="09---install-vscode">09 - install vscode</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>code <span class="nb">.</span>
</code></pre></div></div>

<p>(given <a href="https://code.visualstudio.com/">Visual Studio Code is installed on the <strong>Windows</strong> side (not in WSL)</a>)</p>

<p>(and if needed install <a href="https://aka.ms/vscode-remote/download/extension">Remote development</a>)</p>

<h2 id="manual-setup-skip-if-to-follow-automatic-setup">Manual setup (skip if to follow automatic setup)</h2>

<h3 id="basic-setup">basic setup</h3>

<p>With this way to install, you don’t have any user, you don’t have any launcher within Windows.</p>

<p>Create a user and add it to sudo:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># adduser &lt;yourusername&gt;</span>
<span class="c"># usermod -aG sudo &lt;yourusername&gt;</span>
adduser guillaume
usermod <span class="nt">-aG</span> <span class="nb">sudo </span>guillaume
</code></pre></div></div>

<p>and I can switch to this user simply with</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># su &lt;yourusername&gt;</span>
su guillaume
</code></pre></div></div>

<h3 id="launch-distro-with-yourusername---update-wslconf">launch distro with yourusername - update <code class="language-plaintext highlighter-rouge">wsl.conf</code></h3>

<p>Manually you can now start your distro with your username from powershell</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># wsl -d &lt;distroname&gt; -u &lt;yourusername&gt;</span><span class="w">
</span><span class="n">wsl</span><span class="w"> </span><span class="nt">-d</span><span class="w"> </span><span class="nx">ubuntu-22.04</span><span class="w"> </span><span class="nt">-u</span><span class="w"> </span><span class="nx">guillaume</span><span class="w">
</span></code></pre></div></div>

<p>Or from another wsl (huge avantage to run in linux terminal instead of powershell)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wsl.exe <span class="nt">-d</span> ubuntu-22.04 <span class="nt">-u</span> guillaume
</code></pre></div></div>

<p>but you can better keep this username setting by updating <code class="language-plaintext highlighter-rouge">wsl.conf</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># /etc/wsl.conf</span>
<span class="c"># Set the user when launching a distribution with WSL.</span>
<span class="o">[</span>user]
<span class="nv">default</span><span class="o">=</span>YourUserName
</code></pre></div></div>

<p>It is now setup. You can now shutdown this instance from powershell.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># wsl --shutdown &lt;distroname&gt;</span><span class="w">
</span><span class="n">wsl</span><span class="w"> </span><span class="nt">--shutdown</span><span class="w"> </span><span class="nx">ubuntu-22.04</span><span class="w">
</span></code></pre></div></div>

<p>and when starting <code class="language-plaintext highlighter-rouge">wsl -d ubuntu-22.04</code>, you reach your username.</p>

<h3 id="wsl-vpnkit">wsl-vpnkit</h3>

<p>As wsl-vpnkit is already installed, I just have to</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s1">'wsl.exe -d wsl-vpnkit service wsl-vpnkit start'</span> <span class="o">&gt;&gt;</span> ~/.profile
<span class="nb">source</span> .bashrc
</code></pre></div></div>

<h3 id="gitlab">gitlab</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-t</span> rsa <span class="nt">-b</span> 4096 <span class="nt">-C</span> <span class="s2">"WSL2 ubuntu 22.04"</span>
</code></pre></div></div>

<p>and copy <code class="language-plaintext highlighter-rouge">id_rsa.pub</code> into gitlab &gt; preferences &gt; SSH Keys</p>

<h3 id="corporate-ca-certificates">corporate CA certificates</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone git@gitlab.michelin.com:devops-foundation/devops_environment.git /tmp/devops_environment
<span class="nb">sudo cp</span> /tmp/devops_environment/certs/<span class="k">*</span> /usr/local/share/ca-certificates/
<span class="nb">sudo </span>update-ca-certificates
<span class="nb">rm</span> <span class="nt">-rf</span> /tmp/devops_environment
</code></pre></div></div>

<h3 id="apt-sources">apt sources</h3>

<p>had to replace focal (20.04) to jammy (22.04)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s1">'Acquire { http::User-Agent "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:13.37) Gecko/20100101 Firefox/31.33.7"; };'</span> | <span class="nb">sudo tee</span> /etc/apt/apt.conf.d/90globalprotectconf
<span class="nb">sudo sed</span> <span class="nt">-i</span> <span class="s1">'s@^\(deb \)http://archive.ubuntu.com/ubuntu/\( jammy\(-updates\)\?.*\)$@\1https://artifactory.michelin.com/artifactory/ubuntu-archive-remote\2\n# &amp;@'</span> /etc/apt/sources.list
<span class="nb">sudo sed</span> <span class="nt">-i</span> <span class="s1">'s@^\(deb \)http://security.ubuntu.com/ubuntu/\( jammy\(-updates\)\?.*\)$@\1https://artifactory.michelin.com/artifactory/ubuntu-security-remote\2\n# &amp;@'</span> /etc/apt/sources.list
</code></pre></div></div>

<h3 id="check-everything-is-ok">check everything is ok</h3>

<ul>
  <li>This command must return google ip:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  host google.fr
</code></pre></div></div>

<ul>
  <li>This command must return artifactory ip:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  host artifactory.michelin.com
</code></pre></div></div>

<ul>
  <li>You are able to update your distribution without error:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>apt update
  <span class="nb">sudo </span>apt upgrade <span class="nt">-y</span>
</code></pre></div></div>

<h3 id="setup-config-dotfiles-with-whole-filesystem-">Setup config dotfiles with whole filesystem (/)</h3>

<p>as detailed in <a href="https://castorfou.github.io/guillaume_blog/blog/keep-dotfiles-in-git.html">keep dotfiles in git</a></p>

<p>but to manage the whole filesystem.</p>

<h4 id="init-local-repo">init local repo</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo mkdir</span> <span class="nt">-p</span> /.cfg
<span class="nb">sudo chown</span> <span class="nv">$USER</span>:users /.cfg
git init <span class="nt">--bare</span> /.cfg
<span class="nb">alias </span><span class="nv">config</span><span class="o">=</span><span class="s1">'/usr/bin/git --git-dir=/.cfg/ --work-tree=/'</span>
config config <span class="nt">--local</span> status.showUntrackedFiles no
<span class="nb">echo</span> <span class="s2">"alias config='/usr/bin/git --git-dir=/.cfg/ --work-tree=/'"</span> <span class="o">&gt;&gt;</span> <span class="nv">$HOME</span>/.bash_aliases
<span class="nb">cd
source</span> .bashrc
</code></pre></div></div>

<h4 id="git-default-identity-if-needed">git default identity (if needed)</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>config config <span class="nt">--global</span> user.email <span class="s2">"guillaume.ramelet@michelin.com"</span>
config config <span class="nt">--global</span> user.name <span class="s2">"guillaume"</span>
</code></pre></div></div>

<h4 id="setup-branch-and-push-to-central-repo">setup branch and push to central repo</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>config remote add origin git@gitlab.michelin.com:janus/dotfiles.git
config fetch
<span class="nb">cd
</span>config add .bashrc
config commit <span class="nt">-m</span> <span class="s1">'init with .bashrc'</span>

config branch GR_WSL2_ubuntu22.04
config checkout GR_WSL2_ubuntu22.04
config push <span class="nt">--set-upstream</span> origin GR_WSL2_ubuntu22.04
</code></pre></div></div>]]></content><author><name></name></author><category term="wsl" /><summary type="html"><![CDATA[even if not available in Windows Store]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://castorfou.github.io/guillaume_blog/images/icons/wsl2.jpeg" /><media:content medium="image" url="https://castorfou.github.io/guillaume_blog/images/icons/wsl2.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">keep dotfiles in git</title><link href="https://castorfou.github.io/guillaume_blog/blog/keep-dotfiles-in-git.html" rel="alternate" type="text/html" title="keep dotfiles in git" /><published>2022-04-07T00:00:00-05:00</published><updated>2022-04-07T00:00:00-05:00</updated><id>https://castorfou.github.io/guillaume_blog/blog/keep%20dotfiles%20in%20git</id><content type="html" xml:base="https://castorfou.github.io/guillaume_blog/blog/keep-dotfiles-in-git.html"><![CDATA[<h2 id="source-of-inspiration">source of inspiration</h2>

<p>as <a href="https://www.atlassian.com/git/tutorials/dotfiles">pointed</a> by Jeremy Howard.</p>

<h2 id="how-to-setup-it">How to setup it</h2>

<h4 id="prerequisites">prerequisites</h4>

<p>I consider I already have a git repo with my dotfiles from other machines.</p>

<p>Repo: <code class="language-plaintext highlighter-rouge">git@&lt;your_gitlab_address&gt;:&lt;your_id&gt;/dotfiles.git</code></p>

<p>I keep one separate branch per machine. Current branches: master (empty), and WSL2.</p>

<p>I am going to add a machine called iolab.</p>

<h4 id="from-iolab">from iolab</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init <span class="nt">--bare</span> <span class="nv">$HOME</span>/.cfg
<span class="nb">alias </span><span class="nv">config</span><span class="o">=</span><span class="s1">'/usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME'</span>
config config <span class="nt">--local</span> status.showUntrackedFiles no
<span class="nb">echo</span> <span class="s2">"alias config='/usr/bin/git --git-dir=</span><span class="nv">$HOME</span><span class="s2">/.cfg/ --work-tree=</span><span class="nv">$HOME</span><span class="s2">'"</span> <span class="o">&gt;&gt;</span> <span class="nv">$HOME</span>/.bash_aliases
</code></pre></div></div>

<p>And we can now run <code class="language-plaintext highlighter-rouge">config status</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>base<span class="o">)</span> <span class="o">[</span> 09:53:56 <span class="o">][</span> <span class="nb">id</span>: ~ <span class="o">]</span><span class="nv">$ </span>config status
<span class="c"># On branch master</span>
<span class="c">#</span>
<span class="c"># Initial commit</span>
<span class="c">#</span>
nothing to commit <span class="o">(</span>create/copy files and use <span class="s2">"git add"</span> to track<span class="o">)</span>
</code></pre></div></div>

<p>but now we would like to create a new branch, and push all this to our central repo.</p>

<p>First we have to set this central repo.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>config remote add origin git@&lt;your_gitlab_address&gt;:&lt;your_id&gt;/dotfiles.git
config fetch
</code></pre></div></div>

<p>Before creating our branch, we have to commit something (to really create our local branch master)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>config add .bashrc
config commit <span class="nt">-m</span> <span class="s1">'init with .bashrc'</span>
</code></pre></div></div>

<p>And then only we can create our branch iolab</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>config branch iolab
config checkout iolab
config push <span class="nt">--set-upstream</span> origin iolab
</code></pre></div></div>

<p>we are now ready to use it</p>

<h2 id="how-to-use-it">How to use it</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>config add .bash_aliases
config commit <span class="nt">-m</span><span class="s1">'bash aliases'</span>
config push
</code></pre></div></div>

<h2 id="how-to-setup-2-remote-repo">How to setup 2 remote repo</h2>

<p>There is a nice explanation abut how to work with multiple repos in <a href="https://jigarius.com/blog/multiple-git-remote-repositories">https://jigarius.com/blog/multiple-git-remote-repositories</a>.</p>

<p>To follow that, I will configure my dotfile repo from WSL2 to push to 2 remotes, one on gitlab (internal) and one on github.</p>

<p>For the moment it is only connected to gitlab.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>config remote <span class="nt">-v</span>
origin	git@gitlab.michelin.com:janus/dotfiles.git <span class="o">(</span>fetch<span class="o">)</span>
origin	git@gitlab.michelin.com:janus/dotfiles.git <span class="o">(</span>push<span class="o">)</span>
</code></pre></div></div>

<p>My github repo is at: https://github.com/castorfou/dotfiles.git (I use https, because of my local firewall)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>config remote set-url <span class="nt">--add</span> <span class="nt">--push</span> origin git@gitlab.michelin.com:janus/dotfiles.git
<span class="nv">$ </span>config remote set-url <span class="nt">--add</span> <span class="nt">--push</span> origin https://github.com/castorfou/dotfiles.git
<span class="nv">$ </span>config push origin GR_WSL2
</code></pre></div></div>

<p>I have to get a token from github to access in https</p>

<p>To generate a token:</p>

<ol>
  <li>Log into <strong>GitHub</strong></li>
  <li>Click on your name / Avatar in the upper right corner and select <strong>Settings</strong></li>
  <li>On the left, click <strong>Developer settings</strong></li>
  <li>Select <strong>Personal access tokens</strong> and click <strong>Generate new token</strong></li>
  <li>Give the token a description/name and select the scope of the token
    <ul>
      <li>I selected <strong>repo</strong> only to facilitate pull, push, clone, and commit actions</li>
      <li>Click the link <strong>Read more about OAuth scopes</strong> for details about the permission sets</li>
    </ul>
  </li>
  <li>Click <strong>Generate token</strong></li>
  <li>Copy the token – this is your new password!</li>
</ol>

<p>Lastly, to ensure the local computer remembers the token, we can  enable caching of the credentials. This configures the computer to  remember the complex token so that we dont have too.</p>

<p><code class="language-plaintext highlighter-rouge">git config --global credential.helper cache</code></p>]]></content><author><name></name></author><category term="git" /><summary type="html"><![CDATA[as pointed by Jeremy Howard]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://castorfou.github.io/guillaume_blog/images/git.png" /><media:content medium="image" url="https://castorfou.github.io/guillaume_blog/images/git.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Logbook for February 22</title><link href="https://castorfou.github.io/guillaume_blog/blog/logbook-February-22.html" rel="alternate" type="text/html" title="Logbook for February 22" /><published>2022-02-01T00:00:00-06:00</published><updated>2022-02-01T00:00:00-06:00</updated><id>https://castorfou.github.io/guillaume_blog/blog/logbook-February-22</id><content type="html" xml:base="https://castorfou.github.io/guillaume_blog/blog/logbook-February-22.html"><![CDATA[<h2 id="week-5---february-22">Week 5 - February 22</h2>

<p><strong>Thursday 2/3</strong></p>

<p>Stephane Mallat - collège de France - <a href="https://www.college-de-france.fr/site/stephane-mallat/course-2022-01-26-09h30.htm">Information et complexité</a> video n°2: Estimation par maximum de vraisemblance</p>

<h2 id="week-8---february-22">Week 8 - February 22</h2>

<p><strong>Monday 2/21</strong></p>

<p>Stephane Mallat - collège de France - <a href="https://www.college-de-france.fr/site/stephane-mallat/course-2022-02-02-09h30.htm">Information et complexité</a> video n°3: Optimisation et modèles exponentiels</p>

<p><strong>Tuesday 2/22</strong></p>

<p>Antonin Raffin (Stable Baselines 3 author) explains how to better evaluate RL agents using <a href="https://araffin.github.io/post/rliable/">Rliable</a>. Would like to test that.</p>]]></content><author><name></name></author><category term="logbook" /><summary type="html"><![CDATA[Week 5 - February 22]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://castorfou.github.io/guillaume_blog/images/logbook.jpg" /><media:content medium="image" url="https://castorfou.github.io/guillaume_blog/images/logbook.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">setup wsl2 conda mamba and cuda</title><link href="https://castorfou.github.io/guillaume_blog/blog/wsl2-conda-mamba-cuda.html" rel="alternate" type="text/html" title="setup wsl2 conda mamba and cuda" /><published>2022-01-18T00:00:00-06:00</published><updated>2022-01-18T00:00:00-06:00</updated><id>https://castorfou.github.io/guillaume_blog/blog/wsl2%20conda%20mamba%20cuda</id><content type="html" xml:base="https://castorfou.github.io/guillaume_blog/blog/wsl2-conda-mamba-cuda.html"><![CDATA[<h2 id="wsl2---installation-and-configuration">wsl2 - installation and configuration</h2>

<p>most of it is explained in an <a href="https://developers.michelin.com/details/wsl2/wsl2_fundamentals.html">internal blog entry</a>.</p>

<p>To display windows version: <code class="language-plaintext highlighter-rouge">winver.exe</code></p>

<p>I use version <code class="language-plaintext highlighter-rouge">20H2 build 19042.1415</code></p>

<h4 id="installation">installation</h4>

<p>It is now as easy as to run <code class="language-plaintext highlighter-rouge">wsl --install</code> in powershell as admin.</p>

<p>Full detail at <a href="https://docs.microsoft.com/fr-fr/windows/wsl/install">MS WSL doc</a></p>

<p>Other commands:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># list all wsl distributions installed and their WSL version</span>
wsl <span class="nt">--list</span> <span class="nt">--verbose</span>

<span class="c"># list all distributions available</span>
wsl <span class="nt">--list</span> <span class="nt">--online</span>
Voici la liste des distributions valides qui peuvent être installées.
Installer à l’aide de « wsl <span class="nt">--install</span> <span class="nt">-d</span> &lt;Distribution&gt; ».

NAME            FRIENDLY NAME
Ubuntu          Ubuntu
Debian          Debian GNU/Linux
kali-linux      Kali Linux Rolling
openSUSE-42     openSUSE Leap 42
SLES-12         SUSE Linux Enterprise Server v12
Ubuntu-16.04    Ubuntu 16.04 LTS
Ubuntu-18.04    Ubuntu 18.04 LTS
Ubuntu-20.04    Ubuntu 20.04 LTS

<span class="c"># install Linux distributions</span>
wsl <span class="nt">--install</span> <span class="nt">-d</span> &lt;Distribution Name&gt;

<span class="c"># shutdown wsl: shutdown all </span>
wsl <span class="nt">--shutdown</span> 

<span class="c"># define default wsl distribution to use with wsl</span>
wsl <span class="nt">-s</span> &lt;DistributionName&gt;
</code></pre></div></div>

<h4 id="installation-in-a-non-system-drive">installation in a non-system drive</h4>

<p>and <a href="https://damsteen.nl/blog/2018/08/29/installing-wsl-manually-on-non-system-drive">here</a> is a more advanced config to install in a non system drive (D: instead of C:)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#from powershell</span>
New-Item D:<span class="se">\W</span>SL<span class="se">\U</span>buntu-20.04 <span class="nt">-ItemType</span> Directory
Set-Location D:<span class="se">\W</span>SL<span class="se">\U</span>buntu-20.04

<span class="c">#list+link of distributions in https://docs.microsoft.com/en-us/windows/wsl/install-manual#downloading-distributions</span>
Invoke-WebRequest <span class="nt">-Uri</span> https://aka.ms/wslubuntu2004 <span class="nt">-OutFile</span> Ubuntu-20.04.appx <span class="nt">-UseBasicParsing</span>

Rename-Item .<span class="se">\U</span>buntu-20.04.appx Ubuntu-20.04.zip
Expand-Archive .<span class="se">\U</span>buntu-20.04.zip <span class="nt">-Verbose</span>
<span class="c"># and then run Ubuntu_2004.2021.825.0_x64.appx</span>
</code></pre></div></div>

<p>I don’t know yet where the WSL disk is located (is it a .vhdx file?)</p>

<p>Disks are located at <code class="language-plaintext highlighter-rouge">%USERPROFILE%\AppData\Local\Packages\[distro name]</code></p>

<p>2 ditros used:</p>

<ul>
  <li>
    <p>wsl1 ubuntu 18.04: CanonicalGroupLimited.Ubuntu18.04onWindows_79rhkp1fndgsc</p>
  </li>
  <li>
    <p>wsl2 ubuntu 20.04: CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc</p>
  </li>
</ul>

<p>So disks are still in C:\</p>

<p>Guess I have to use move-wsl.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Set-Location <span class="s1">'D:\Program Files (x86)\move-wsl\'</span>
.<span class="se">\m</span>ove-wsl.ps1

PS D:<span class="se">\P</span>rogram Files <span class="o">(</span>x86<span class="o">)</span><span class="se">\m</span>ove-wsl&gt; .<span class="se">\m</span>ove-wsl.ps1
Getting distros...
Select distro to move:
1: Ubuntu-18.04
2: Ubuntu
2
Enter WSL target directory:
D:<span class="se">\w</span>sl<span class="se">\U</span>buntu-20.04
Move Ubuntu to <span class="s2">"D:</span><span class="se">\w</span><span class="s2">sl</span><span class="se">\U</span><span class="s2">buntu-20.04"</span>? <span class="o">(</span>Y|n<span class="o">)</span>: Y
Exporting VHDX to <span class="s2">"D:</span><span class="se">\w</span><span class="s2">sl</span><span class="se">\U</span><span class="s2">buntu-20.04</span><span class="se">\U</span><span class="s2">buntu.tar"</span> ...
</code></pre></div></div>

<p>And after that, have to create file<code class="language-plaintext highlighter-rouge">/etc/wsl.conf</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>guillaume@LL11LPC0PQARQ:~<span class="nv">$ </span><span class="nb">cat</span> /etc/wsl.conf
<span class="o">[</span>user]
<span class="nv">default</span><span class="o">=</span>guillaume
</code></pre></div></div>

<h4 id="configuration">configuration</h4>

<h5 id="wsl-vpnkit">wsl-vpnkit</h5>

<p>It is nicely explained in the Michelin blog entry. DNS resolution is kind of broken (I think due to internal protections we use on our corporate PC)</p>

<p><a href="https://github.com/moby/vpnkit">vpnkit</a> provides a secured solution to make it work. And sakai135 has packaged it for wsl: <a href="https://github.com/sakai135/wsl-vpnkit">wsl-vpnkit</a></p>

<p>The steps to install wsl-vpn kit are:</p>

<ul>
  <li>Create a working directory on your windows workspace and download this <a href="https://github.com/sakai135/wsl-vpnkit/releases/download/v0.2.3/wsl-vpnkit.tar.gz">packaging of wsl-vpnkit</a> inside.</li>
  <li>Now, open a powershell and go to the location of wsl-vpnkit.tar.gz, downloaded during the previous step</li>
  <li>On your powershell terminal, launch:</li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c">#/!\ in powserhsell</span>
  wsl <span class="nt">--import</span> wsl-vpnkit <span class="nv">$env</span>:USERPROFILE<span class="se">\w</span>sl-vpnkit wsl-vpnkit.tar.gz
  wsl <span class="nt">-d</span> wsl-vpnkit
</code></pre></div></div>

<ul>
  <li>You can now exit your powershell</li>
  <li>For the last step, to ensure all wsl reboot good communication, we will write in .profile file of your ubuntu user wsl-vpnkit initialization command:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">echo</span> <span class="s1">'wsl.exe -d wsl-vpnkit service wsl-vpnkit start'</span> <span class="o">&gt;&gt;</span> ~/.profile
</code></pre></div></div>

<ul>
  <li>Relaunch your WSL terminal</li>
</ul>

<h5 id="git-configuration">git configuration</h5>

<p>create a SSH key pair under your distribution</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-t</span> rsa <span class="nt">-b</span> 4096 <span class="nt">-C</span> <span class="s2">"WSL2"</span>
</code></pre></div></div>

<p>Integrate into gitlab using <a href="https://docs.gitlab.com/ee/ssh/#add-an-ssh-key-to-your-gitlab-account">gitlab doc</a>.  (copy <code class="language-plaintext highlighter-rouge">id_rsa.pub</code> into gitlab &gt; preferences &gt; SSH Keys)cat .s</p>

<h5 id="add-corporate-ca-certificates">Add corporate CA certificates</h5>

<p>Michelin SI is behind an ssl proxy with his proper PKI for certificates delivering. That is why, your subsystem must add this pki in her recognized authorities.</p>

<p>To do this, we will clone a repository with the certificates in the subsystem and copy them to ca-certificates:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone git@gitlab.michelin.com:devops-foundation/devops_environment.git /tmp/devops_environment
<span class="nb">sudo cp</span> /tmp/devops_environment/certs/<span class="k">*</span> /usr/local/share/ca-certificates/
<span class="nb">sudo </span>update-ca-certificates
</code></pre></div></div>

<p>If everything is ok, terminal notify you that certificates has been added.</p>

<p>You can now clean the temp working folder:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">rm</span> <span class="nt">-rf</span> /tmp/devops_environment
</code></pre></div></div>

<p>we can have similar approach to update CA certifcates for Python. 1st step is to locate cacert.pem of your active python environment.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">certifi</span>
<span class="n">certifi</span><span class="p">.</span><span class="n">where</span><span class="p">()</span> 
<span class="o">&gt;&gt;</span> <span class="s">'/home/guillaume/miniconda3/envs/fastai/lib/python3.9/site-packages/certifi/cacert.pem'</span>
</code></pre></div></div>

<p><strong>TO BE FIXED</strong></p>

<p>After having run <code class="language-plaintext highlighter-rouge">update-ca-certifcates</code>, there is an updated ca file at <code class="language-plaintext highlighter-rouge">/etc/ssl/certs/ca-certificates.crt</code>. Let’s concatenate it to our <code class="language-plaintext highlighter-rouge">cacert.pem</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cp</span> /etc/ssl/certs/ca-certificates.crt /tmp/ca-certificates.crt
openssl x509 <span class="nt">-in</span> /tmp/ca-certificates.crt <span class="nt">-out</span> /tmp/ca-certificates.pem <span class="nt">-outform</span> PEM
<span class="nb">cat</span> /tmp/ca-certificates.pem | <span class="nb">tee</span> <span class="nt">-a</span> /home/guillaume/miniconda3/envs/fastai/lib/python3.9/site-packages/certifi/cacert.pem
</code></pre></div></div>

<h5 id="configure-apt">Configure APT</h5>

<p>The last step, to have a subsystem ready to use, is to have an apt with Michelin trusted sources configured. Ubuntu based package repositories can’t be used behind Michelin proxy.</p>

<p>Michelin offers its own apt server with artifactory. To configure apt to use artifactory, launch these commands:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s1">'Acquire { http::User-Agent "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:13.37) Gecko/20100101 Firefox/31.33.7"; };'</span> | <span class="nb">sudo tee</span> /etc/apt/apt.conf.d/90globalprotectconf
<span class="nb">sudo sed</span> <span class="nt">-i</span> <span class="s1">'s@^\(deb \)http://archive.ubuntu.com/ubuntu/\( focal\(-updates\)\?.*\)$@\1https://artifactory.michelin.com/artifactory/ubuntu-archive-remote\2\n# &amp;@'</span> /etc/apt/sources.list
<span class="nb">sudo sed</span> <span class="nt">-i</span> <span class="s1">'s@^\(deb \)http://security.ubuntu.com/ubuntu/\( focal\(-updates\)\?.*\)$@\1https://artifactory.michelin.com/artifactory/ubuntu-security-remote\2\n# &amp;@'</span> /etc/apt/sources.list
</code></pre></div></div>

<h5 id="check-if-your-wsl-distribution-is-working-correctly">Check if your WSL distribution is working correctly</h5>

<p>To verify if everything is OK on your distribution:</p>

<ul>
  <li>This command must return google ip:</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  host google.fr
</code></pre></div></div>

<ul>
  <li>This command must return artifactory ip:</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  host artifactory.michelin.com
</code></pre></div></div>

<ul>
  <li>You are able to update your distribution without error:</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  sudo apt update
  sudo apt upgrade -y
</code></pre></div></div>

<h2 id="conda-mamba---installation-and-configuration">Conda Mamba - installation and configuration</h2>

<h4 id="conda-installation">conda installation</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">tmpdir</span><span class="o">=</span><span class="si">$(</span><span class="nb">mktemp</span> <span class="nt">-d</span><span class="si">)</span>
<span class="nb">cd</span> <span class="nv">$tmpdir</span>
wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
<span class="nb">chmod</span> +x Miniconda3-latest-Linux-x86_64.sh
<span class="c"># answer yes to question Do you wish the installer to initialize Miniconda3 by running conda init?</span>
bash Miniconda3-latest-Linux-x86_64.sh <span class="nt">-p</span> <span class="nv">$HOME</span>/miniconda3

<span class="o">&gt;&gt;</span> <span class="o">==&gt;</span> For changes to take effect, close and re-open your current shell. &lt;<span class="o">==</span>
</code></pre></div></div>

<p>With this configuration, conda will be activate at startup. If you’d prefer that conda’s base environment not be activated on startup,   set the auto_activate_base parameter to false: <code class="language-plaintext highlighter-rouge">conda config --set auto_activate_base false</code></p>

<h4 id="conda-configuration">conda configuration</h4>

<p>As we have in-house CA certificates, and conda uses its own CA certificates (in <code class="language-plaintext highlighter-rouge">~/miniconda3/ssl</code>)</p>

<p>We have to change this behaviour and ask conda to use system CA certifcates.</p>

<p>At the end of <code class="language-plaintext highlighter-rouge">.bash_rc</code>, add <code class="language-plaintext highlighter-rouge">export REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt</code></p>

<h4 id="mamba-installation">mamba installation</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda <span class="nb">install </span>mamba <span class="nt">-n</span> base <span class="nt">-c</span> conda-forge
mamba init
</code></pre></div></div>

<h4 id="installation-jupyter-notebook-nb_conda_kernels-jupyter-lab">installation jupyter notebook, nb_conda_kernels, jupyter lab</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mamba <span class="nb">install </span>nb_conda_kernels
mamba <span class="nb">install</span> <span class="nt">-c</span> conda-forge jupyterlab jupyterlab-git
</code></pre></div></div>

<h4 id="create-conda-envt---fastai-v253-optional">create conda envt - fastai (v2.5.3) (optional)</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mamba create <span class="nt">--name</span> fastai
mamba activate fastai
mamba <span class="nb">install</span> <span class="nt">-c</span> fastai <span class="nt">-c</span> pytorch fastai
mamba <span class="nb">install </span>ipykernel
</code></pre></div></div>

<h2 id="jupyter">Jupyter</h2>

<p>Start jupyter (lab or notebook) from base environment, and switch to desired python environment.</p>

<h4 id="modify-jupyter-config">modify jupyter config</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#create jupyter config file in ~.jupyter</span>
jupyter notebook <span class="nt">--generate-config</span>
</code></pre></div></div>

<p>And activate jupyter config file to change <code class="language-plaintext highlighter-rouge">#c.NotebookApp.use_redirect_file = True</code> to <code class="language-plaintext highlighter-rouge">c.NotebookApp.use_redirect_file = False</code></p>]]></content><author><name></name></author><category term="wsl" /><category term="cuda" /><category term="conda" /><summary type="html"><![CDATA[best of breed windows + linux]]></summary></entry><entry><title type="html">Logbook for January 22</title><link href="https://castorfou.github.io/guillaume_blog/blog/logbook-January-22.html" rel="alternate" type="text/html" title="Logbook for January 22" /><published>2022-01-01T00:00:00-06:00</published><updated>2022-01-01T00:00:00-06:00</updated><id>https://castorfou.github.io/guillaume_blog/blog/logbook-January-22</id><content type="html" xml:base="https://castorfou.github.io/guillaume_blog/blog/logbook-January-22.html"><![CDATA[<h2 id="week-1---january-22">Week 1 - January 22</h2>

<p><strong>Monday 1/3</strong></p>

<p>Will try to use <a href="https://www.zotero.org">Zotero</a> for managing research papers. Can sync between PC. Seems helpful. My <a href="https://www.zotero.org/guillaumeramelet/library">lib</a></p>

<p><strong>Tuesday 1/4</strong></p>

<p>Git revert a file to a previous commit</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git log 00<span class="se">\ </span>-<span class="se">\ </span>my_lib.ipynb
git checkout f97406b026bfdf529d2dc4de96224bdfbaa576a8 00<span class="se">\ </span>-<span class="se">\ </span>my_lib.ipynb
</code></pre></div></div>

<h2 id="week-2---january-22">Week 2 - January 22</h2>

<p><strong>Monday 1/17</strong></p>

<p>To update fastai from an existing envt under windows</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda update <span class="nt">-n</span> base <span class="nt">-c</span> defaults conda <span class="o">(</span>from base<span class="o">)</span>
conda update fastai <span class="nt">-c</span> fastai <span class="nt">-c</span> pytorch <span class="nt">-c</span> conda-forge <span class="nt">-c</span> nvidia <span class="o">(</span>from fastai<span class="o">)</span>
</code></pre></div></div>

<p>To install <a href="https://github.com/mamba-org/mamba">mamba</a> under WSL2</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda <span class="nb">install </span>mamba <span class="nt">-n</span> base <span class="nt">-c</span> conda-forge <span class="o">(</span>from base<span class="o">)</span>

<span class="k">then

</span>mamba init
</code></pre></div></div>

<p>To use system CA certificate in WSL2</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">REQUESTS_CA_BUNDLE</span><span class="o">=</span>/etc/ssl/certs/ca-certificates.crt
</code></pre></div></div>

<p>To install fastai in WSL2 using mamba</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mamba</span> <span class="n">install</span> <span class="o">-</span><span class="n">c</span> <span class="n">fastchan</span> <span class="n">fastai</span>
</code></pre></div></div>

<p><strong>Thursday 1/20</strong></p>

<p>Stephane Mallat - collège de France - <a href="https://www.college-de-france.fr/site/stephane-mallat/course-2022-01-19-09h30.htm">Information et complexité</a> but unfortunately video is not yet available.</p>

<p>Re-read of arXiv:2110.01889 Deep Neural Networks and Tabular Data: A Survey (here on <a href="https://www.zotero.org/guillaumeramelet/collections/S9YLK8K9/items/V6LWTC5E/collection">zotero</a>)</p>

<h2 id="week-3---january-22">Week 3 - January 22</h2>

<p><strong>Tuesday 1/26</strong></p>

<p>Video of 1st lecture of Stephane Mallat 2022 is now available.</p>]]></content><author><name></name></author><category term="logbook" /><summary type="html"><![CDATA[Week 1 - January 22]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://castorfou.github.io/guillaume_blog/images/logbook.jpg" /><media:content medium="image" url="https://castorfou.github.io/guillaume_blog/images/logbook.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>